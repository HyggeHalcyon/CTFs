// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

contract Warmup {
    bool public solved;
    constructor() {

        bytes memory _byte = hex"608060405234801561000f575f5ffd5b5060043610610034575f3560e01c8063799320bb14610038578063f492302614610056575b5f5ffd5b610040610072565b60405161004d91906100d5565b60405180910390f35b610070600480360381019061006b9190610125565b610083565b005b5f5f9054906101000a900460ff1681565b611092821480156100965750620aa28981145b61009e575f5ffd5b60015f5f6101000a81548160ff0219169083151502179055505050565b5f8115159050919050565b6100cf816100bb565b82525050565b5f6020820190506100e85f8301846100c6565b92915050565b5f5ffd5b5f819050919050565b610104816100f2565b811461010e575f5ffd5b50565b5f8135905061011f816100fb565b92915050565b5f5f6040838503121561013b5761013a6100ee565b5b5f61014885828601610111565b925050602061015985828601610111565b915050925092905056fea264697066735822122097d365bee5aca894d5c1fd3462418a123ca24137e88143721acca112ff90f0f464736f6c634300081c0033";
        assembly {
            return(add(_byte, 0x20), mload(_byte))
        }
    }

    function solve(uint256 a, uint256 b) external {
        require((a == 1) && (b == 2));
        solved = true;
    }
}